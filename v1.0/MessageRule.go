// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import "context"

// MessageRule undocumented
type MessageRule struct {
	// Entity is the base model of MessageRule
	Entity
	// DisplayName undocumented
	DisplayName *string `json:"displayName,omitempty"`
	// Sequence undocumented
	Sequence *int `json:"sequence,omitempty"`
	// Conditions undocumented
	Conditions *MessageRulePredicates `json:"conditions,omitempty"`
	// Actions undocumented
	Actions *MessageRuleActions `json:"actions,omitempty"`
	// Exceptions undocumented
	Exceptions *MessageRulePredicates `json:"exceptions,omitempty"`
	// IsEnabled undocumented
	IsEnabled *bool `json:"isEnabled,omitempty"`
	// HasError undocumented
	HasError *bool `json:"hasError,omitempty"`
	// IsReadOnly undocumented
	IsReadOnly *bool `json:"isReadOnly,omitempty"`
}

// MessageRuleRequestBuilder is request builder for MessageRule
type MessageRuleRequestBuilder struct{ BaseRequestBuilder }

// Request returns MessageRuleRequest
func (b *MessageRuleRequestBuilder) Request() *MessageRuleRequest {
	return &MessageRuleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MessageRuleRequest is request for MessageRule
type MessageRuleRequest struct{ BaseRequest }

// Get performs GET request for MessageRule
func (r *MessageRuleRequest) Get(ctx context.Context) (resObj *MessageRule, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MessageRule
func (r *MessageRuleRequest) Update(ctx context.Context, reqObj *MessageRule) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MessageRule
func (r *MessageRuleRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
