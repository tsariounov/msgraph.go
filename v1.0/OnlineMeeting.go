// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"time"
)

// OnlineMeeting undocumented
type OnlineMeeting struct {
	// Entity is the base model of OnlineMeeting
	Entity
	// CreationDateTime undocumented
	CreationDateTime *time.Time `json:"creationDateTime,omitempty"`
	// StartDateTime undocumented
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
	// EndDateTime undocumented
	EndDateTime *time.Time `json:"endDateTime,omitempty"`
	// JoinWebURL undocumented
	JoinWebURL *string `json:"joinWebUrl,omitempty"`
	// Subject undocumented
	Subject *string `json:"subject,omitempty"`
	// Participants undocumented
	Participants *MeetingParticipants `json:"participants,omitempty"`
	// AudioConferencing undocumented
	AudioConferencing *AudioConferencing `json:"audioConferencing,omitempty"`
	// ChatInfo undocumented
	ChatInfo *ChatInfo `json:"chatInfo,omitempty"`
	// VideoTeleconferenceID undocumented
	VideoTeleconferenceID *string `json:"videoTeleconferenceId,omitempty"`
}

// OnlineMeetingRequestBuilder is request builder for OnlineMeeting
type OnlineMeetingRequestBuilder struct{ BaseRequestBuilder }

// Request returns OnlineMeetingRequest
func (b *OnlineMeetingRequestBuilder) Request() *OnlineMeetingRequest {
	return &OnlineMeetingRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// OnlineMeetingRequest is request for OnlineMeeting
type OnlineMeetingRequest struct{ BaseRequest }

// Get performs GET request for OnlineMeeting
func (r *OnlineMeetingRequest) Get(ctx context.Context) (resObj *OnlineMeeting, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for OnlineMeeting
func (r *OnlineMeetingRequest) Update(ctx context.Context, reqObj *OnlineMeeting) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for OnlineMeeting
func (r *OnlineMeetingRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
