// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// PurchaseInvoice undocumented
type PurchaseInvoice struct {
	// Entity is the base model of PurchaseInvoice
	Entity
	// Number undocumented
	Number *string `json:"number,omitempty"`
	// InvoiceDate undocumented
	InvoiceDate *Date `json:"invoiceDate,omitempty"`
	// DueDate undocumented
	DueDate *Date `json:"dueDate,omitempty"`
	// VendorInvoiceNumber undocumented
	VendorInvoiceNumber *string `json:"vendorInvoiceNumber,omitempty"`
	// VendorID undocumented
	VendorID *UUID `json:"vendorId,omitempty"`
	// VendorNumber undocumented
	VendorNumber *string `json:"vendorNumber,omitempty"`
	// VendorName undocumented
	VendorName *string `json:"vendorName,omitempty"`
	// PayToName undocumented
	PayToName *string `json:"payToName,omitempty"`
	// PayToContact undocumented
	PayToContact *string `json:"payToContact,omitempty"`
	// PayToVendorID undocumented
	PayToVendorID *UUID `json:"payToVendorId,omitempty"`
	// PayToVendorNumber undocumented
	PayToVendorNumber *string `json:"payToVendorNumber,omitempty"`
	// ShipToName undocumented
	ShipToName *string `json:"shipToName,omitempty"`
	// ShipToContact undocumented
	ShipToContact *string `json:"shipToContact,omitempty"`
	// BuyFromAddress undocumented
	BuyFromAddress *PostalAddressType `json:"buyFromAddress,omitempty"`
	// PayToAddress undocumented
	PayToAddress *PostalAddressType `json:"payToAddress,omitempty"`
	// ShipToAddress undocumented
	ShipToAddress *PostalAddressType `json:"shipToAddress,omitempty"`
	// CurrencyID undocumented
	CurrencyID *UUID `json:"currencyId,omitempty"`
	// CurrencyCode undocumented
	CurrencyCode *string `json:"currencyCode,omitempty"`
	// PricesIncludeTax undocumented
	PricesIncludeTax *bool `json:"pricesIncludeTax,omitempty"`
	// DiscountAmount undocumented
	DiscountAmount *int `json:"discountAmount,omitempty"`
	// DiscountAppliedBeforeTax undocumented
	DiscountAppliedBeforeTax *bool `json:"discountAppliedBeforeTax,omitempty"`
	// TotalAmountExcludingTax undocumented
	TotalAmountExcludingTax *int `json:"totalAmountExcludingTax,omitempty"`
	// TotalTaxAmount undocumented
	TotalTaxAmount *int `json:"totalTaxAmount,omitempty"`
	// TotalAmountIncludingTax undocumented
	TotalAmountIncludingTax *int `json:"totalAmountIncludingTax,omitempty"`
	// Status undocumented
	Status *string `json:"status,omitempty"`
	// LastModifiedDateTime undocumented
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`
	// PurchaseInvoiceLines undocumented
	PurchaseInvoiceLines []PurchaseInvoiceLine `json:"purchaseInvoiceLines,omitempty"`
	// Vendor undocumented
	Vendor *Vendor `json:"vendor,omitempty"`
	// Currency undocumented
	Currency *Currency `json:"currency,omitempty"`
}

// PurchaseInvoicePostRequestParameter undocumented
type PurchaseInvoicePostRequestParameter struct {
}

// PurchaseInvoiceRequestBuilder is request builder for PurchaseInvoice
type PurchaseInvoiceRequestBuilder struct{ BaseRequestBuilder }

// Request returns PurchaseInvoiceRequest
func (b *PurchaseInvoiceRequestBuilder) Request() *PurchaseInvoiceRequest {
	return &PurchaseInvoiceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PurchaseInvoiceRequest is request for PurchaseInvoice
type PurchaseInvoiceRequest struct{ BaseRequest }

// Get performs GET request for PurchaseInvoice
func (r *PurchaseInvoiceRequest) Get(ctx context.Context) (resObj *PurchaseInvoice, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PurchaseInvoice
func (r *PurchaseInvoiceRequest) Update(ctx context.Context, reqObj *PurchaseInvoice) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PurchaseInvoice
func (r *PurchaseInvoiceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// Currency is navigation property
func (b *PurchaseInvoiceRequestBuilder) Currency() *CurrencyRequestBuilder {
	bb := &CurrencyRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/currency"
	return bb
}

// PurchaseInvoiceLines returns request builder for PurchaseInvoiceLine collection
func (b *PurchaseInvoiceRequestBuilder) PurchaseInvoiceLines() *PurchaseInvoicePurchaseInvoiceLinesCollectionRequestBuilder {
	bb := &PurchaseInvoicePurchaseInvoiceLinesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/purchaseInvoiceLines"
	return bb
}

// PurchaseInvoicePurchaseInvoiceLinesCollectionRequestBuilder is request builder for PurchaseInvoiceLine collection
type PurchaseInvoicePurchaseInvoiceLinesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PurchaseInvoiceLine collection
func (b *PurchaseInvoicePurchaseInvoiceLinesCollectionRequestBuilder) Request() *PurchaseInvoicePurchaseInvoiceLinesCollectionRequest {
	return &PurchaseInvoicePurchaseInvoiceLinesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PurchaseInvoiceLine item
func (b *PurchaseInvoicePurchaseInvoiceLinesCollectionRequestBuilder) ID(id string) *PurchaseInvoiceLineRequestBuilder {
	bb := &PurchaseInvoiceLineRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PurchaseInvoicePurchaseInvoiceLinesCollectionRequest is request for PurchaseInvoiceLine collection
type PurchaseInvoicePurchaseInvoiceLinesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PurchaseInvoiceLine collection
func (r *PurchaseInvoicePurchaseInvoiceLinesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]PurchaseInvoiceLine, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PurchaseInvoiceLine
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PurchaseInvoiceLine
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for PurchaseInvoiceLine collection
func (r *PurchaseInvoicePurchaseInvoiceLinesCollectionRequest) Get(ctx context.Context) ([]PurchaseInvoiceLine, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil)
}

// Add performs POST request for PurchaseInvoiceLine collection
func (r *PurchaseInvoicePurchaseInvoiceLinesCollectionRequest) Add(ctx context.Context, reqObj *PurchaseInvoiceLine) (resObj *PurchaseInvoiceLine, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Vendor is navigation property
func (b *PurchaseInvoiceRequestBuilder) Vendor() *VendorRequestBuilder {
	bb := &VendorRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/vendor"
	return bb
}

//
type PurchaseInvoicePostRequestBuilder struct{ BaseRequestBuilder }

// Post action undocumented
func (b *PurchaseInvoiceRequestBuilder) Post(reqObj *PurchaseInvoicePostRequestParameter) *PurchaseInvoicePostRequestBuilder {
	bb := &PurchaseInvoicePostRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/post"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type PurchaseInvoicePostRequest struct{ BaseRequest }

//
func (b *PurchaseInvoicePostRequestBuilder) Request() *PurchaseInvoicePostRequest {
	return &PurchaseInvoicePostRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *PurchaseInvoicePostRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
