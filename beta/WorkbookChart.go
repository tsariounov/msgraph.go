// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// WorkbookChart undocumented
type WorkbookChart struct {
	// Entity is the base model of WorkbookChart
	Entity
	// Height undocumented
	Height *float64 `json:"height,omitempty"`
	// Left undocumented
	Left *float64 `json:"left,omitempty"`
	// Name undocumented
	Name *string `json:"name,omitempty"`
	// Top undocumented
	Top *float64 `json:"top,omitempty"`
	// Width undocumented
	Width *float64 `json:"width,omitempty"`
	// Axes undocumented
	Axes *WorkbookChartAxes `json:"axes,omitempty"`
	// DataLabels undocumented
	DataLabels *WorkbookChartDataLabels `json:"dataLabels,omitempty"`
	// Format undocumented
	Format *WorkbookChartAreaFormat `json:"format,omitempty"`
	// Legend undocumented
	Legend *WorkbookChartLegend `json:"legend,omitempty"`
	// Series undocumented
	Series []WorkbookChartSeries `json:"series,omitempty"`
	// Title undocumented
	Title *WorkbookChartTitle `json:"title,omitempty"`
	// Worksheet undocumented
	Worksheet *WorkbookWorksheet `json:"worksheet,omitempty"`
}

// WorkbookChartCollectionAddRequestParameter undocumented
type WorkbookChartCollectionAddRequestParameter struct {
	// Type undocumented
	Type *string `json:"type,omitempty"`
	// SourceData undocumented
	SourceData json.RawMessage `json:"sourceData,omitempty"`
	// SeriesBy undocumented
	SeriesBy *string `json:"seriesBy,omitempty"`
}

// WorkbookChartSetDataRequestParameter undocumented
type WorkbookChartSetDataRequestParameter struct {
	// SourceData undocumented
	SourceData json.RawMessage `json:"sourceData,omitempty"`
	// SeriesBy undocumented
	SeriesBy *string `json:"seriesBy,omitempty"`
}

// WorkbookChartSetPositionRequestParameter undocumented
type WorkbookChartSetPositionRequestParameter struct {
	// StartCell undocumented
	StartCell json.RawMessage `json:"startCell,omitempty"`
	// EndCell undocumented
	EndCell json.RawMessage `json:"endCell,omitempty"`
}

// WorkbookChartRequestBuilder is request builder for WorkbookChart
type WorkbookChartRequestBuilder struct{ BaseRequestBuilder }

// Request returns WorkbookChartRequest
func (b *WorkbookChartRequestBuilder) Request() *WorkbookChartRequest {
	return &WorkbookChartRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// WorkbookChartRequest is request for WorkbookChart
type WorkbookChartRequest struct{ BaseRequest }

// Get performs GET request for WorkbookChart
func (r *WorkbookChartRequest) Get(ctx context.Context) (resObj *WorkbookChart, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for WorkbookChart
func (r *WorkbookChartRequest) Update(ctx context.Context, reqObj *WorkbookChart) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for WorkbookChart
func (r *WorkbookChartRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// Axes is navigation property
func (b *WorkbookChartRequestBuilder) Axes() *WorkbookChartAxesRequestBuilder {
	bb := &WorkbookChartAxesRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/axes"
	return bb
}

// DataLabels is navigation property
func (b *WorkbookChartRequestBuilder) DataLabels() *WorkbookChartDataLabelsRequestBuilder {
	bb := &WorkbookChartDataLabelsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/dataLabels"
	return bb
}

// Format is navigation property
func (b *WorkbookChartRequestBuilder) Format() *WorkbookChartAreaFormatRequestBuilder {
	bb := &WorkbookChartAreaFormatRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/format"
	return bb
}

// Legend is navigation property
func (b *WorkbookChartRequestBuilder) Legend() *WorkbookChartLegendRequestBuilder {
	bb := &WorkbookChartLegendRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/legend"
	return bb
}

// Series returns request builder for WorkbookChartSeries collection
func (b *WorkbookChartRequestBuilder) Series() *WorkbookChartSeriesCollectionRequestBuilder {
	bb := &WorkbookChartSeriesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/series"
	return bb
}

// WorkbookChartSeriesCollectionRequestBuilder is request builder for WorkbookChartSeries collection
type WorkbookChartSeriesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WorkbookChartSeries collection
func (b *WorkbookChartSeriesCollectionRequestBuilder) Request() *WorkbookChartSeriesCollectionRequest {
	return &WorkbookChartSeriesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WorkbookChartSeries item
func (b *WorkbookChartSeriesCollectionRequestBuilder) ID(id string) *WorkbookChartSeriesRequestBuilder {
	bb := &WorkbookChartSeriesRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WorkbookChartSeriesCollectionRequest is request for WorkbookChartSeries collection
type WorkbookChartSeriesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WorkbookChartSeries collection
func (r *WorkbookChartSeriesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]WorkbookChartSeries, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WorkbookChartSeries
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WorkbookChartSeries
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for WorkbookChartSeries collection
func (r *WorkbookChartSeriesCollectionRequest) Get(ctx context.Context) ([]WorkbookChartSeries, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil)
}

// Add performs POST request for WorkbookChartSeries collection
func (r *WorkbookChartSeriesCollectionRequest) Add(ctx context.Context, reqObj *WorkbookChartSeries) (resObj *WorkbookChartSeries, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Title is navigation property
func (b *WorkbookChartRequestBuilder) Title() *WorkbookChartTitleRequestBuilder {
	bb := &WorkbookChartTitleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/title"
	return bb
}

// Worksheet is navigation property
func (b *WorkbookChartRequestBuilder) Worksheet() *WorkbookWorksheetRequestBuilder {
	bb := &WorkbookWorksheetRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/worksheet"
	return bb
}

//
type WorkbookChartCollectionAddRequestBuilder struct{ BaseRequestBuilder }

// Add action undocumented
func (b *WorkbookWorksheetChartsCollectionRequestBuilder) Add(reqObj *WorkbookChartCollectionAddRequestParameter) *WorkbookChartCollectionAddRequestBuilder {
	bb := &WorkbookChartCollectionAddRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/add"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type WorkbookChartCollectionAddRequest struct{ BaseRequest }

//
func (b *WorkbookChartCollectionAddRequestBuilder) Request() *WorkbookChartCollectionAddRequest {
	return &WorkbookChartCollectionAddRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *WorkbookChartCollectionAddRequest) Post(ctx context.Context) (resObj *WorkbookChart, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

//
type WorkbookChartSetDataRequestBuilder struct{ BaseRequestBuilder }

// SetData action undocumented
func (b *WorkbookChartRequestBuilder) SetData(reqObj *WorkbookChartSetDataRequestParameter) *WorkbookChartSetDataRequestBuilder {
	bb := &WorkbookChartSetDataRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/setData"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type WorkbookChartSetDataRequest struct{ BaseRequest }

//
func (b *WorkbookChartSetDataRequestBuilder) Request() *WorkbookChartSetDataRequest {
	return &WorkbookChartSetDataRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *WorkbookChartSetDataRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

//
type WorkbookChartSetPositionRequestBuilder struct{ BaseRequestBuilder }

// SetPosition action undocumented
func (b *WorkbookChartRequestBuilder) SetPosition(reqObj *WorkbookChartSetPositionRequestParameter) *WorkbookChartSetPositionRequestBuilder {
	bb := &WorkbookChartSetPositionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/setPosition"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type WorkbookChartSetPositionRequest struct{ BaseRequest }

//
func (b *WorkbookChartSetPositionRequestBuilder) Request() *WorkbookChartSetPositionRequest {
	return &WorkbookChartSetPositionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *WorkbookChartSetPositionRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
