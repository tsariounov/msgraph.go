// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"time"
)

// AuditEvent A class containing the properties for Audit Event.
type AuditEvent struct {
	// Entity is the base model of AuditEvent
	Entity
	// DisplayName Event display name.
	DisplayName *string `json:"displayName,omitempty"`
	// ComponentName Component name.
	ComponentName *string `json:"componentName,omitempty"`
	// Actor AAD user and application that are associated with the audit event.
	Actor *AuditActor `json:"actor,omitempty"`
	// Activity Friendly name of the activity.
	Activity *string `json:"activity,omitempty"`
	// ActivityDateTime The date time in UTC when the activity was performed.
	ActivityDateTime *time.Time `json:"activityDateTime,omitempty"`
	// ActivityType The type of activity that was being performed.
	ActivityType *string `json:"activityType,omitempty"`
	// ActivityOperationType The HTTP operation type of the activity.
	ActivityOperationType *string `json:"activityOperationType,omitempty"`
	// ActivityResult The result of the activity.
	ActivityResult *string `json:"activityResult,omitempty"`
	// CorrelationID The client request Id that is used to correlate activity within the system.
	CorrelationID *UUID `json:"correlationId,omitempty"`
	// Resources Resources being modified.
	Resources []AuditResource `json:"resources,omitempty"`
	// Category Audit category.
	Category *string `json:"category,omitempty"`
}

// AuditEventRequestBuilder is request builder for AuditEvent
type AuditEventRequestBuilder struct{ BaseRequestBuilder }

// Request returns AuditEventRequest
func (b *AuditEventRequestBuilder) Request() *AuditEventRequest {
	return &AuditEventRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AuditEventRequest is request for AuditEvent
type AuditEventRequest struct{ BaseRequest }

// Get performs GET request for AuditEvent
func (r *AuditEventRequest) Get(ctx context.Context) (resObj *AuditEvent, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AuditEvent
func (r *AuditEventRequest) Update(ctx context.Context, reqObj *AuditEvent) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AuditEvent
func (r *AuditEventRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
