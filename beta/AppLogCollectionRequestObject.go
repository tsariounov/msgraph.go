// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"time"
)

// AppLogCollectionRequestObject AppLogCollectionRequest Entity.
type AppLogCollectionRequestObject struct {
	// Entity is the base model of AppLogCollectionRequestObject
	Entity
	// Status Log upload status
	Status *AppLogUploadState `json:"status,omitempty"`
	// ErrorMessage Error message if any during the upload process
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// CustomLogFolders List of log folders.
	CustomLogFolders []string `json:"customLogFolders,omitempty"`
	// CompletedDateTime Time at which the upload log request reached a terminal state
	CompletedDateTime *time.Time `json:"completedDateTime,omitempty"`
}

// AppLogCollectionRequestObjectCreateDownloadURLRequestParameter undocumented
type AppLogCollectionRequestObjectCreateDownloadURLRequestParameter struct {
}

// AppLogCollectionRequestObjectRequestBuilder is request builder for AppLogCollectionRequestObject
type AppLogCollectionRequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns AppLogCollectionRequestObjectRequest
func (b *AppLogCollectionRequestObjectRequestBuilder) Request() *AppLogCollectionRequestObjectRequest {
	return &AppLogCollectionRequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AppLogCollectionRequestObjectRequest is request for AppLogCollectionRequestObject
type AppLogCollectionRequestObjectRequest struct{ BaseRequest }

// Get performs GET request for AppLogCollectionRequestObject
func (r *AppLogCollectionRequestObjectRequest) Get(ctx context.Context) (resObj *AppLogCollectionRequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AppLogCollectionRequestObject
func (r *AppLogCollectionRequestObjectRequest) Update(ctx context.Context, reqObj *AppLogCollectionRequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AppLogCollectionRequestObject
func (r *AppLogCollectionRequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

//
type AppLogCollectionRequestObjectCreateDownloadURLRequestBuilder struct{ BaseRequestBuilder }

// CreateDownloadURL action undocumented
func (b *AppLogCollectionRequestObjectRequestBuilder) CreateDownloadURL(reqObj *AppLogCollectionRequestObjectCreateDownloadURLRequestParameter) *AppLogCollectionRequestObjectCreateDownloadURLRequestBuilder {
	bb := &AppLogCollectionRequestObjectCreateDownloadURLRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/createDownloadUrl"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type AppLogCollectionRequestObjectCreateDownloadURLRequest struct{ BaseRequest }

//
func (b *AppLogCollectionRequestObjectCreateDownloadURLRequestBuilder) Request() *AppLogCollectionRequestObjectCreateDownloadURLRequest {
	return &AppLogCollectionRequestObjectCreateDownloadURLRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *AppLogCollectionRequestObjectCreateDownloadURLRequest) Post(ctx context.Context) (resObj *AppLogCollectionDownloadDetails, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}
