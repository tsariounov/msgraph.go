// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// PolicySet A class containing the properties used for PolicySet.
type PolicySet struct {
	// Entity is the base model of PolicySet
	Entity
	// CreatedDateTime Creation time of the PolicySet.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	// LastModifiedDateTime Last modified time of the PolicySet.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`
	// DisplayName DisplayName of the PolicySet.
	DisplayName *string `json:"displayName,omitempty"`
	// Description Description of the PolicySet.
	Description *string `json:"description,omitempty"`
	// Status Validation/assignment status of the PolicySet.
	Status *PolicySetStatus `json:"status,omitempty"`
	// ErrorCode Error code if any occured.
	ErrorCode *ErrorCode `json:"errorCode,omitempty"`
	// GuidedDeploymentTags Tags of the guided deployment
	GuidedDeploymentTags []string `json:"guidedDeploymentTags,omitempty"`
	// RoleScopeTags RoleScopeTags of the PolicySet
	RoleScopeTags []string `json:"roleScopeTags,omitempty"`
	// Assignments undocumented
	Assignments []PolicySetAssignment `json:"assignments,omitempty"`
	// Items undocumented
	Items []PolicySetItem `json:"items,omitempty"`
}

// PolicySetCollectionGetPolicySetsRequestParameter undocumented
type PolicySetCollectionGetPolicySetsRequestParameter struct {
	// PolicySetIDs undocumented
	PolicySetIDs []string `json:"policySetIds,omitempty"`
}

// PolicySetUpdateRequestParameter undocumented
type PolicySetUpdateRequestParameter struct {
	// AddedPolicySetItems undocumented
	AddedPolicySetItems []PolicySetItem `json:"addedPolicySetItems,omitempty"`
	// UpdatedPolicySetItems undocumented
	UpdatedPolicySetItems []PolicySetItem `json:"updatedPolicySetItems,omitempty"`
	// DeletedPolicySetItems undocumented
	DeletedPolicySetItems []string `json:"deletedPolicySetItems,omitempty"`
	// Assignments undocumented
	Assignments []PolicySetAssignment `json:"assignments,omitempty"`
}

// PolicySetRequestBuilder is request builder for PolicySet
type PolicySetRequestBuilder struct{ BaseRequestBuilder }

// Request returns PolicySetRequest
func (b *PolicySetRequestBuilder) Request() *PolicySetRequest {
	return &PolicySetRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PolicySetRequest is request for PolicySet
type PolicySetRequest struct{ BaseRequest }

// Get performs GET request for PolicySet
func (r *PolicySetRequest) Get(ctx context.Context) (resObj *PolicySet, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PolicySet
func (r *PolicySetRequest) Update(ctx context.Context, reqObj *PolicySet) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PolicySet
func (r *PolicySetRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// Assignments returns request builder for PolicySetAssignment collection
func (b *PolicySetRequestBuilder) Assignments() *PolicySetAssignmentsCollectionRequestBuilder {
	bb := &PolicySetAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// PolicySetAssignmentsCollectionRequestBuilder is request builder for PolicySetAssignment collection
type PolicySetAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PolicySetAssignment collection
func (b *PolicySetAssignmentsCollectionRequestBuilder) Request() *PolicySetAssignmentsCollectionRequest {
	return &PolicySetAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PolicySetAssignment item
func (b *PolicySetAssignmentsCollectionRequestBuilder) ID(id string) *PolicySetAssignmentRequestBuilder {
	bb := &PolicySetAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicySetAssignmentsCollectionRequest is request for PolicySetAssignment collection
type PolicySetAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PolicySetAssignment collection
func (r *PolicySetAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]PolicySetAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PolicySetAssignment
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PolicySetAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for PolicySetAssignment collection
func (r *PolicySetAssignmentsCollectionRequest) Get(ctx context.Context) ([]PolicySetAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil)
}

// Add performs POST request for PolicySetAssignment collection
func (r *PolicySetAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *PolicySetAssignment) (resObj *PolicySetAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// Items returns request builder for PolicySetItem collection
func (b *PolicySetRequestBuilder) Items() *PolicySetItemsCollectionRequestBuilder {
	bb := &PolicySetItemsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/items"
	return bb
}

// PolicySetItemsCollectionRequestBuilder is request builder for PolicySetItem collection
type PolicySetItemsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for PolicySetItem collection
func (b *PolicySetItemsCollectionRequestBuilder) Request() *PolicySetItemsCollectionRequest {
	return &PolicySetItemsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for PolicySetItem item
func (b *PolicySetItemsCollectionRequestBuilder) ID(id string) *PolicySetItemRequestBuilder {
	bb := &PolicySetItemRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// PolicySetItemsCollectionRequest is request for PolicySetItem collection
type PolicySetItemsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for PolicySetItem collection
func (r *PolicySetItemsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]PolicySetItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PolicySetItem
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PolicySetItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for PolicySetItem collection
func (r *PolicySetItemsCollectionRequest) Get(ctx context.Context) ([]PolicySetItem, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil)
}

// Add performs POST request for PolicySetItem collection
func (r *PolicySetItemsCollectionRequest) Add(ctx context.Context, reqObj *PolicySetItem) (resObj *PolicySetItem, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

//
type PolicySetCollectionGetPolicySetsRequestBuilder struct{ BaseRequestBuilder }

// GetPolicySets action undocumented
func (b *DeviceAppManagementPolicySetsCollectionRequestBuilder) GetPolicySets(reqObj *PolicySetCollectionGetPolicySetsRequestParameter) *PolicySetCollectionGetPolicySetsRequestBuilder {
	bb := &PolicySetCollectionGetPolicySetsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/getPolicySets"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type PolicySetCollectionGetPolicySetsRequest struct{ BaseRequest }

//
func (b *PolicySetCollectionGetPolicySetsRequestBuilder) Request() *PolicySetCollectionGetPolicySetsRequest {
	return &PolicySetCollectionGetPolicySetsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *PolicySetCollectionGetPolicySetsRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]PolicySet, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []PolicySet
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []PolicySet
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

//
func (r *PolicySetCollectionGetPolicySetsRequest) Post(ctx context.Context) ([]PolicySet, error) {
	return r.Paging(ctx, "POST", "", r.requestObject)
}

//
type PolicySetUpdateRequestBuilder struct{ BaseRequestBuilder }

// Update action undocumented
func (b *PolicySetRequestBuilder) Update(reqObj *PolicySetUpdateRequestParameter) *PolicySetUpdateRequestBuilder {
	bb := &PolicySetUpdateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/update"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type PolicySetUpdateRequest struct{ BaseRequest }

//
func (b *PolicySetUpdateRequestBuilder) Request() *PolicySetUpdateRequest {
	return &PolicySetUpdateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *PolicySetUpdateRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
