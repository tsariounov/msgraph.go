// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// WindowsUpdateForBusinessConfiguration Windows Update for business configuration.
type WindowsUpdateForBusinessConfiguration struct {
	// DeviceConfiguration is the base model of WindowsUpdateForBusinessConfiguration
	DeviceConfiguration
	// DeliveryOptimizationMode Delivery Optimization Mode
	DeliveryOptimizationMode *WindowsDeliveryOptimizationMode `json:"deliveryOptimizationMode,omitempty"`
	// PrereleaseFeatures The pre-release features.
	PrereleaseFeatures *PrereleaseFeatures `json:"prereleaseFeatures,omitempty"`
	// AutomaticUpdateMode Automatic update mode.
	AutomaticUpdateMode *AutomaticUpdateMode `json:"automaticUpdateMode,omitempty"`
	// MicrosoftUpdateServiceAllowed Allow Microsoft Update Service
	MicrosoftUpdateServiceAllowed *bool `json:"microsoftUpdateServiceAllowed,omitempty"`
	// DriversExcluded Exclude Windows update Drivers
	DriversExcluded *bool `json:"driversExcluded,omitempty"`
	// InstallationSchedule Installation schedule
	InstallationSchedule *WindowsUpdateInstallScheduleType `json:"installationSchedule,omitempty"`
	// QualityUpdatesDeferralPeriodInDays Defer Quality Updates by these many days
	QualityUpdatesDeferralPeriodInDays *int `json:"qualityUpdatesDeferralPeriodInDays,omitempty"`
	// FeatureUpdatesDeferralPeriodInDays Defer Feature Updates by these many days
	FeatureUpdatesDeferralPeriodInDays *int `json:"featureUpdatesDeferralPeriodInDays,omitempty"`
	// QualityUpdatesPaused Pause Quality Updates
	QualityUpdatesPaused *bool `json:"qualityUpdatesPaused,omitempty"`
	// FeatureUpdatesPaused Pause Feature Updates
	FeatureUpdatesPaused *bool `json:"featureUpdatesPaused,omitempty"`
	// QualityUpdatesPauseExpiryDateTime Quality Updates Pause Expiry datetime
	QualityUpdatesPauseExpiryDateTime *time.Time `json:"qualityUpdatesPauseExpiryDateTime,omitempty"`
	// FeatureUpdatesPauseExpiryDateTime Feature Updates Pause Expiry datetime
	FeatureUpdatesPauseExpiryDateTime *time.Time `json:"featureUpdatesPauseExpiryDateTime,omitempty"`
	// BusinessReadyUpdatesOnly Determines which branch devices will receive their updates from
	BusinessReadyUpdatesOnly *WindowsUpdateType `json:"businessReadyUpdatesOnly,omitempty"`
	// SkipChecksBeforeRestart Set to skip all check before restart: Battery level = 40%, User presence, Display Needed, Presentation mode, Full screen mode, phone call state, game mode etc.
	SkipChecksBeforeRestart *bool `json:"skipChecksBeforeRestart,omitempty"`
	// UpdateWeeks Scheduled the update installation on the weeks of the month
	UpdateWeeks *WindowsUpdateForBusinessUpdateWeeks `json:"updateWeeks,omitempty"`
	// QualityUpdatesPauseStartDate Quality Updates Pause start date. This property is read-only.
	QualityUpdatesPauseStartDate *Date `json:"qualityUpdatesPauseStartDate,omitempty"`
	// FeatureUpdatesPauseStartDate Feature Updates Pause start date. This property is read-only.
	FeatureUpdatesPauseStartDate *Date `json:"featureUpdatesPauseStartDate,omitempty"`
	// FeatureUpdatesRollbackWindowInDays The number of days after a Feature Update for which a rollback is valid
	FeatureUpdatesRollbackWindowInDays *int `json:"featureUpdatesRollbackWindowInDays,omitempty"`
	// QualityUpdatesWillBeRolledBack Specifies whether to rollback Quality Updates on the next device check in
	QualityUpdatesWillBeRolledBack *bool `json:"qualityUpdatesWillBeRolledBack,omitempty"`
	// FeatureUpdatesWillBeRolledBack Specifies whether to rollback Feature Updates on the next device check in
	FeatureUpdatesWillBeRolledBack *bool `json:"featureUpdatesWillBeRolledBack,omitempty"`
	// QualityUpdatesRollbackStartDateTime Quality Updates Rollback Start datetime
	QualityUpdatesRollbackStartDateTime *time.Time `json:"qualityUpdatesRollbackStartDateTime,omitempty"`
	// FeatureUpdatesRollbackStartDateTime Feature Updates Rollback Start datetime
	FeatureUpdatesRollbackStartDateTime *time.Time `json:"featureUpdatesRollbackStartDateTime,omitempty"`
	// EngagedRestartDeadlineInDays Deadline in days before automatically scheduling and executing a pending restart outside of active hours, with valid range from 2 to 30 days
	EngagedRestartDeadlineInDays *int `json:"engagedRestartDeadlineInDays,omitempty"`
	// EngagedRestartSnoozeScheduleInDays Number of days a user can snooze Engaged Restart reminder notifications with valid range from 1 to 3 days
	EngagedRestartSnoozeScheduleInDays *int `json:"engagedRestartSnoozeScheduleInDays,omitempty"`
	// EngagedRestartTransitionScheduleInDays Number of days before transitioning from Auto Restarts scheduled outside of active hours to Engaged Restart, which requires the user to schedule, with valid range from 0 to 30 days
	EngagedRestartTransitionScheduleInDays *int `json:"engagedRestartTransitionScheduleInDays,omitempty"`
	// DeadlineForFeatureUpdatesInDays Number of days before feature updates are installed automatically with valid range from 2 to 30 days
	DeadlineForFeatureUpdatesInDays *int `json:"deadlineForFeatureUpdatesInDays,omitempty"`
	// DeadlineForQualityUpdatesInDays Number of days before quality updates are installed automatically with valid range from 2 to 30 days
	DeadlineForQualityUpdatesInDays *int `json:"deadlineForQualityUpdatesInDays,omitempty"`
	// DeadlineGracePeriodInDays Number of days after deadline  until restarts occur automatically with valid range from 0 to 7 days
	DeadlineGracePeriodInDays *int `json:"deadlineGracePeriodInDays,omitempty"`
	// PostponeRebootUntilAfterDeadline Specifies if the device should wait until deadline for rebooting outside of active hours
	PostponeRebootUntilAfterDeadline *bool `json:"postponeRebootUntilAfterDeadline,omitempty"`
	// AutoRestartNotificationDismissal Specify the method by which the auto-restart required notification is dismissed
	AutoRestartNotificationDismissal *AutoRestartNotificationDismissalMethod `json:"autoRestartNotificationDismissal,omitempty"`
	// ScheduleRestartWarningInHours Specify the period for auto-restart warning reminder notifications. Supported values: 2, 4, 8, 12 or 24 (hours).
	ScheduleRestartWarningInHours *int `json:"scheduleRestartWarningInHours,omitempty"`
	// ScheduleImminentRestartWarningInMinutes Specify the period for auto-restart imminent warning notifications. Supported values: 15, 30 or 60 (minutes).
	ScheduleImminentRestartWarningInMinutes *int `json:"scheduleImminentRestartWarningInMinutes,omitempty"`
	// UserPauseAccess Specifies whether to enable end user’s access to pause software updates.
	UserPauseAccess *Enablement `json:"userPauseAccess,omitempty"`
	// UserWindowsUpdateScanAccess Specifies whether to disable user’s access to scan Windows Update.
	UserWindowsUpdateScanAccess *Enablement `json:"userWindowsUpdateScanAccess,omitempty"`
	// UpdateNotificationLevel Specifies what Windows Update notifications users see.
	UpdateNotificationLevel *WindowsUpdateNotificationDisplayOption `json:"updateNotificationLevel,omitempty"`
	// DeviceUpdateStates undocumented
	DeviceUpdateStates []WindowsUpdateState `json:"deviceUpdateStates,omitempty"`
}

// WindowsUpdateForBusinessConfigurationExtendFeatureUpdatesPauseRequestParameter undocumented
type WindowsUpdateForBusinessConfigurationExtendFeatureUpdatesPauseRequestParameter struct {
}

// WindowsUpdateForBusinessConfigurationExtendQualityUpdatesPauseRequestParameter undocumented
type WindowsUpdateForBusinessConfigurationExtendQualityUpdatesPauseRequestParameter struct {
}

// WindowsUpdateForBusinessConfigurationRequestBuilder is request builder for WindowsUpdateForBusinessConfiguration
type WindowsUpdateForBusinessConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns WindowsUpdateForBusinessConfigurationRequest
func (b *WindowsUpdateForBusinessConfigurationRequestBuilder) Request() *WindowsUpdateForBusinessConfigurationRequest {
	return &WindowsUpdateForBusinessConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// WindowsUpdateForBusinessConfigurationRequest is request for WindowsUpdateForBusinessConfiguration
type WindowsUpdateForBusinessConfigurationRequest struct{ BaseRequest }

// Get performs GET request for WindowsUpdateForBusinessConfiguration
func (r *WindowsUpdateForBusinessConfigurationRequest) Get(ctx context.Context) (resObj *WindowsUpdateForBusinessConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for WindowsUpdateForBusinessConfiguration
func (r *WindowsUpdateForBusinessConfigurationRequest) Update(ctx context.Context, reqObj *WindowsUpdateForBusinessConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for WindowsUpdateForBusinessConfiguration
func (r *WindowsUpdateForBusinessConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// DeviceUpdateStates returns request builder for WindowsUpdateState collection
func (b *WindowsUpdateForBusinessConfigurationRequestBuilder) DeviceUpdateStates() *WindowsUpdateForBusinessConfigurationDeviceUpdateStatesCollectionRequestBuilder {
	bb := &WindowsUpdateForBusinessConfigurationDeviceUpdateStatesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/deviceUpdateStates"
	return bb
}

// WindowsUpdateForBusinessConfigurationDeviceUpdateStatesCollectionRequestBuilder is request builder for WindowsUpdateState collection
type WindowsUpdateForBusinessConfigurationDeviceUpdateStatesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for WindowsUpdateState collection
func (b *WindowsUpdateForBusinessConfigurationDeviceUpdateStatesCollectionRequestBuilder) Request() *WindowsUpdateForBusinessConfigurationDeviceUpdateStatesCollectionRequest {
	return &WindowsUpdateForBusinessConfigurationDeviceUpdateStatesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for WindowsUpdateState item
func (b *WindowsUpdateForBusinessConfigurationDeviceUpdateStatesCollectionRequestBuilder) ID(id string) *WindowsUpdateStateRequestBuilder {
	bb := &WindowsUpdateStateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// WindowsUpdateForBusinessConfigurationDeviceUpdateStatesCollectionRequest is request for WindowsUpdateState collection
type WindowsUpdateForBusinessConfigurationDeviceUpdateStatesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for WindowsUpdateState collection
func (r *WindowsUpdateForBusinessConfigurationDeviceUpdateStatesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]WindowsUpdateState, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []WindowsUpdateState
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []WindowsUpdateState
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for WindowsUpdateState collection
func (r *WindowsUpdateForBusinessConfigurationDeviceUpdateStatesCollectionRequest) Get(ctx context.Context) ([]WindowsUpdateState, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil)
}

// Add performs POST request for WindowsUpdateState collection
func (r *WindowsUpdateForBusinessConfigurationDeviceUpdateStatesCollectionRequest) Add(ctx context.Context, reqObj *WindowsUpdateState) (resObj *WindowsUpdateState, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

//
type WindowsUpdateForBusinessConfigurationExtendFeatureUpdatesPauseRequestBuilder struct{ BaseRequestBuilder }

// ExtendFeatureUpdatesPause action undocumented
func (b *WindowsUpdateForBusinessConfigurationRequestBuilder) ExtendFeatureUpdatesPause(reqObj *WindowsUpdateForBusinessConfigurationExtendFeatureUpdatesPauseRequestParameter) *WindowsUpdateForBusinessConfigurationExtendFeatureUpdatesPauseRequestBuilder {
	bb := &WindowsUpdateForBusinessConfigurationExtendFeatureUpdatesPauseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/extendFeatureUpdatesPause"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type WindowsUpdateForBusinessConfigurationExtendFeatureUpdatesPauseRequest struct{ BaseRequest }

//
func (b *WindowsUpdateForBusinessConfigurationExtendFeatureUpdatesPauseRequestBuilder) Request() *WindowsUpdateForBusinessConfigurationExtendFeatureUpdatesPauseRequest {
	return &WindowsUpdateForBusinessConfigurationExtendFeatureUpdatesPauseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *WindowsUpdateForBusinessConfigurationExtendFeatureUpdatesPauseRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

//
type WindowsUpdateForBusinessConfigurationExtendQualityUpdatesPauseRequestBuilder struct{ BaseRequestBuilder }

// ExtendQualityUpdatesPause action undocumented
func (b *WindowsUpdateForBusinessConfigurationRequestBuilder) ExtendQualityUpdatesPause(reqObj *WindowsUpdateForBusinessConfigurationExtendQualityUpdatesPauseRequestParameter) *WindowsUpdateForBusinessConfigurationExtendQualityUpdatesPauseRequestBuilder {
	bb := &WindowsUpdateForBusinessConfigurationExtendQualityUpdatesPauseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/extendQualityUpdatesPause"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type WindowsUpdateForBusinessConfigurationExtendQualityUpdatesPauseRequest struct{ BaseRequest }

//
func (b *WindowsUpdateForBusinessConfigurationExtendQualityUpdatesPauseRequestBuilder) Request() *WindowsUpdateForBusinessConfigurationExtendQualityUpdatesPauseRequest {
	return &WindowsUpdateForBusinessConfigurationExtendQualityUpdatesPauseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *WindowsUpdateForBusinessConfigurationExtendQualityUpdatesPauseRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
