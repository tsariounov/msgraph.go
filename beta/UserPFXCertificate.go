// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"time"
)

// UserPFXCertificate Entity that encapsulates all information required for a user's PFX certificates.
type UserPFXCertificate struct {
	// Entity is the base model of UserPFXCertificate
	Entity
	// Thumbprint SHA-1 thumbprint of the PFX certificate.
	Thumbprint *string `json:"thumbprint,omitempty"`
	// IntendedPurpose Certificate's intended purpose from the point-of-view of deployment.
	IntendedPurpose *UserPfxIntendedPurpose `json:"intendedPurpose,omitempty"`
	// UserPrincipalName User Principal Name of the PFX certificate.
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
	// StartDateTime Certificate's validity start date/time.
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
	// ExpirationDateTime Certificate's validity expiration date/time.
	ExpirationDateTime *time.Time `json:"expirationDateTime,omitempty"`
	// ProviderName Crypto provider used to encrypt this blob.
	ProviderName *string `json:"providerName,omitempty"`
	// KeyName Name of the key (within the provider) used to encrypt the blob.
	KeyName *string `json:"keyName,omitempty"`
	// PaddingScheme Padding scheme used by the provider during encryption/decryption.
	PaddingScheme *UserPfxPaddingScheme `json:"paddingScheme,omitempty"`
	// EncryptedPfxBlob Encrypted PFX blob.
	EncryptedPfxBlob *Binary `json:"encryptedPfxBlob,omitempty"`
	// EncryptedPfxPassword Encrypted PFX password.
	EncryptedPfxPassword *string `json:"encryptedPfxPassword,omitempty"`
	// CreatedDateTime Date/time when this PFX certificate was imported.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	// LastModifiedDateTime Date/time when this PFX certificate was last modified.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`
}

// UserPFXCertificateRequestBuilder is request builder for UserPFXCertificate
type UserPFXCertificateRequestBuilder struct{ BaseRequestBuilder }

// Request returns UserPFXCertificateRequest
func (b *UserPFXCertificateRequestBuilder) Request() *UserPFXCertificateRequest {
	return &UserPFXCertificateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// UserPFXCertificateRequest is request for UserPFXCertificate
type UserPFXCertificateRequest struct{ BaseRequest }

// Get performs GET request for UserPFXCertificate
func (r *UserPFXCertificateRequest) Get(ctx context.Context) (resObj *UserPFXCertificate, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for UserPFXCertificate
func (r *UserPFXCertificateRequest) Update(ctx context.Context, reqObj *UserPFXCertificate) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for UserPFXCertificate
func (r *UserPFXCertificateRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
