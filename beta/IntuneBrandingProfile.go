// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// IntuneBrandingProfile This entity contains data which is used in customizing the tenant level appearance of the Company Portal applications as well as the end user web portal.
type IntuneBrandingProfile struct {
	// Entity is the base model of IntuneBrandingProfile
	Entity
	// ProfileName Name of the profile
	ProfileName *string `json:"profileName,omitempty"`
	// ProfileDescription Description of the profile
	ProfileDescription *string `json:"profileDescription,omitempty"`
	// IsDefaultProfile Boolean that represents whether the profile is used as default or not
	IsDefaultProfile *bool `json:"isDefaultProfile,omitempty"`
	// CreatedDateTime Time when the BrandingProfile was created
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	// LastModifiedDateTime Time when the BrandingProfile was last modified
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`
	// DisplayName Company/organization name that is displayed to end users
	DisplayName *string `json:"displayName,omitempty"`
	// ThemeColor Primary theme color used in the Company Portal applications and web portal
	ThemeColor *RgbColor `json:"themeColor,omitempty"`
	// ShowLogo Boolean that represents whether the administrator-supplied logo images are shown or not
	ShowLogo *bool `json:"showLogo,omitempty"`
	// ShowDisplayNameNextToLogo Boolean that represents whether the administrator-supplied display name will be shown next to the logo image or not
	ShowDisplayNameNextToLogo *bool `json:"showDisplayNameNextToLogo,omitempty"`
	// ThemeColorLogo Logo image displayed in Company Portal apps which have a theme color background behind the logo
	ThemeColorLogo *MimeContent `json:"themeColorLogo,omitempty"`
	// LightBackgroundLogo Logo image displayed in Company Portal apps which have a light background behind the logo
	LightBackgroundLogo *MimeContent `json:"lightBackgroundLogo,omitempty"`
	// LandingPageCustomizedImage Customized image displayed in Company Portal apps landing page
	LandingPageCustomizedImage *MimeContent `json:"landingPageCustomizedImage,omitempty"`
	// ContactITName Name of the person/organization responsible for IT support
	ContactITName *string `json:"contactITName,omitempty"`
	// ContactITPhoneNumber Phone number of the person/organization responsible for IT support
	ContactITPhoneNumber *string `json:"contactITPhoneNumber,omitempty"`
	// ContactITEmailAddress E-mail address of the person/organization responsible for IT support
	ContactITEmailAddress *string `json:"contactITEmailAddress,omitempty"`
	// ContactITNotes Text comments regarding the person/organization responsible for IT support
	ContactITNotes *string `json:"contactITNotes,omitempty"`
	// OnlineSupportSiteURL URL to the company/organization’s IT helpdesk site
	OnlineSupportSiteURL *string `json:"onlineSupportSiteUrl,omitempty"`
	// OnlineSupportSiteName Display name of the company/organization’s IT helpdesk site
	OnlineSupportSiteName *string `json:"onlineSupportSiteName,omitempty"`
	// PrivacyURL URL to the company/organization’s privacy policy
	PrivacyURL *string `json:"privacyUrl,omitempty"`
	// CustomPrivacyMessage Text comments regarding what the admin has access to on the device
	CustomPrivacyMessage *string `json:"customPrivacyMessage,omitempty"`
	// IsRemoveDeviceDisabled Boolean that represents whether the adminsistrator has disabled the 'Remove Device' action on corporate owned devices.
	IsRemoveDeviceDisabled *bool `json:"isRemoveDeviceDisabled,omitempty"`
	// IsFactoryResetDisabled Boolean that represents whether the adminsistrator has disabled the 'Factory Reset' action on corporate owned devices.
	IsFactoryResetDisabled *bool `json:"isFactoryResetDisabled,omitempty"`
	// CompanyPortalBlockedActions Collection of blocked actions on the company portal as per platform and device ownership types.
	CompanyPortalBlockedActions []CompanyPortalBlockedAction `json:"companyPortalBlockedActions,omitempty"`
	// ShowAzureADEnterpriseApps Boolean that indicates if AzureAD Enterprise Apps will be shown in Company Portal
	ShowAzureADEnterpriseApps *bool `json:"showAzureADEnterpriseApps,omitempty"`
	// ShowOfficeWebApps Boolean that indicates if Office WebApps will be shown in Company Portal
	ShowOfficeWebApps *bool `json:"showOfficeWebApps,omitempty"`
	// Assignments undocumented
	Assignments []IntuneBrandingProfileAssignment `json:"assignments,omitempty"`
}

// IntuneBrandingProfileAssignRequestParameter undocumented
type IntuneBrandingProfileAssignRequestParameter struct {
	// Assignments undocumented
	Assignments []IntuneBrandingProfileAssignment `json:"assignments,omitempty"`
}

// IntuneBrandingProfileRequestBuilder is request builder for IntuneBrandingProfile
type IntuneBrandingProfileRequestBuilder struct{ BaseRequestBuilder }

// Request returns IntuneBrandingProfileRequest
func (b *IntuneBrandingProfileRequestBuilder) Request() *IntuneBrandingProfileRequest {
	return &IntuneBrandingProfileRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// IntuneBrandingProfileRequest is request for IntuneBrandingProfile
type IntuneBrandingProfileRequest struct{ BaseRequest }

// Get performs GET request for IntuneBrandingProfile
func (r *IntuneBrandingProfileRequest) Get(ctx context.Context) (resObj *IntuneBrandingProfile, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for IntuneBrandingProfile
func (r *IntuneBrandingProfileRequest) Update(ctx context.Context, reqObj *IntuneBrandingProfile) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for IntuneBrandingProfile
func (r *IntuneBrandingProfileRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// Assignments returns request builder for IntuneBrandingProfileAssignment collection
func (b *IntuneBrandingProfileRequestBuilder) Assignments() *IntuneBrandingProfileAssignmentsCollectionRequestBuilder {
	bb := &IntuneBrandingProfileAssignmentsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignments"
	return bb
}

// IntuneBrandingProfileAssignmentsCollectionRequestBuilder is request builder for IntuneBrandingProfileAssignment collection
type IntuneBrandingProfileAssignmentsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IntuneBrandingProfileAssignment collection
func (b *IntuneBrandingProfileAssignmentsCollectionRequestBuilder) Request() *IntuneBrandingProfileAssignmentsCollectionRequest {
	return &IntuneBrandingProfileAssignmentsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IntuneBrandingProfileAssignment item
func (b *IntuneBrandingProfileAssignmentsCollectionRequestBuilder) ID(id string) *IntuneBrandingProfileAssignmentRequestBuilder {
	bb := &IntuneBrandingProfileAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IntuneBrandingProfileAssignmentsCollectionRequest is request for IntuneBrandingProfileAssignment collection
type IntuneBrandingProfileAssignmentsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IntuneBrandingProfileAssignment collection
func (r *IntuneBrandingProfileAssignmentsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]IntuneBrandingProfileAssignment, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IntuneBrandingProfileAssignment
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IntuneBrandingProfileAssignment
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for IntuneBrandingProfileAssignment collection
func (r *IntuneBrandingProfileAssignmentsCollectionRequest) Get(ctx context.Context) ([]IntuneBrandingProfileAssignment, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil)
}

// Add performs POST request for IntuneBrandingProfileAssignment collection
func (r *IntuneBrandingProfileAssignmentsCollectionRequest) Add(ctx context.Context, reqObj *IntuneBrandingProfileAssignment) (resObj *IntuneBrandingProfileAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

//
type IntuneBrandingProfileAssignRequestBuilder struct{ BaseRequestBuilder }

// Assign action undocumented
func (b *IntuneBrandingProfileRequestBuilder) Assign(reqObj *IntuneBrandingProfileAssignRequestParameter) *IntuneBrandingProfileAssignRequestBuilder {
	bb := &IntuneBrandingProfileAssignRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/assign"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type IntuneBrandingProfileAssignRequest struct{ BaseRequest }

//
func (b *IntuneBrandingProfileAssignRequestBuilder) Request() *IntuneBrandingProfileAssignRequest {
	return &IntuneBrandingProfileAssignRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *IntuneBrandingProfileAssignRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
