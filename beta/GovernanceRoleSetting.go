// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"time"
)

// GovernanceRoleSetting undocumented
type GovernanceRoleSetting struct {
	// Entity is the base model of GovernanceRoleSetting
	Entity
	// ResourceID undocumented
	ResourceID *string `json:"resourceId,omitempty"`
	// RoleDefinitionID undocumented
	RoleDefinitionID *string `json:"roleDefinitionId,omitempty"`
	// IsDefault undocumented
	IsDefault *bool `json:"isDefault,omitempty"`
	// LastUpdatedDateTime undocumented
	LastUpdatedDateTime *time.Time `json:"lastUpdatedDateTime,omitempty"`
	// LastUpdatedBy undocumented
	LastUpdatedBy *string `json:"lastUpdatedBy,omitempty"`
	// AdminEligibleSettings undocumented
	AdminEligibleSettings []GovernanceRuleSetting `json:"adminEligibleSettings,omitempty"`
	// AdminMemberSettings undocumented
	AdminMemberSettings []GovernanceRuleSetting `json:"adminMemberSettings,omitempty"`
	// UserEligibleSettings undocumented
	UserEligibleSettings []GovernanceRuleSetting `json:"userEligibleSettings,omitempty"`
	// UserMemberSettings undocumented
	UserMemberSettings []GovernanceRuleSetting `json:"userMemberSettings,omitempty"`
	// RoleDefinition undocumented
	RoleDefinition *GovernanceRoleDefinition `json:"roleDefinition,omitempty"`
	// Resource undocumented
	Resource *GovernanceResource `json:"resource,omitempty"`
}

// GovernanceRoleSettingRequestBuilder is request builder for GovernanceRoleSetting
type GovernanceRoleSettingRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernanceRoleSettingRequest
func (b *GovernanceRoleSettingRequestBuilder) Request() *GovernanceRoleSettingRequest {
	return &GovernanceRoleSettingRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernanceRoleSettingRequest is request for GovernanceRoleSetting
type GovernanceRoleSettingRequest struct{ BaseRequest }

// Get performs GET request for GovernanceRoleSetting
func (r *GovernanceRoleSettingRequest) Get(ctx context.Context) (resObj *GovernanceRoleSetting, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernanceRoleSetting
func (r *GovernanceRoleSettingRequest) Update(ctx context.Context, reqObj *GovernanceRoleSetting) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernanceRoleSetting
func (r *GovernanceRoleSettingRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// Resource is navigation property
func (b *GovernanceRoleSettingRequestBuilder) Resource() *GovernanceResourceRequestBuilder {
	bb := &GovernanceResourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/resource"
	return bb
}

// RoleDefinition is navigation property
func (b *GovernanceRoleSettingRequestBuilder) RoleDefinition() *GovernanceRoleDefinitionRequestBuilder {
	bb := &GovernanceRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinition"
	return bb
}
