// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import "context"

// EventMessage undocumented
type EventMessage struct {
	// Message is the base model of EventMessage
	Message
	// MeetingMessageType undocumented
	MeetingMessageType *MeetingMessageType `json:"meetingMessageType,omitempty"`
	// StartDateTime undocumented
	StartDateTime *DateTimeTimeZone `json:"startDateTime,omitempty"`
	// EndDateTime undocumented
	EndDateTime *DateTimeTimeZone `json:"endDateTime,omitempty"`
	// Location undocumented
	Location *Location `json:"location,omitempty"`
	// Type undocumented
	Type *EventType `json:"type,omitempty"`
	// Recurrence undocumented
	Recurrence *PatternedRecurrence `json:"recurrence,omitempty"`
	// IsOutOfDate undocumented
	IsOutOfDate *bool `json:"isOutOfDate,omitempty"`
	// IsAllDay undocumented
	IsAllDay *bool `json:"isAllDay,omitempty"`
	// IsDelegated undocumented
	IsDelegated *bool `json:"isDelegated,omitempty"`
	// Event undocumented
	Event *Event `json:"event,omitempty"`
}

// EventMessageRequestBuilder is request builder for EventMessage
type EventMessageRequestBuilder struct{ BaseRequestBuilder }

// Request returns EventMessageRequest
func (b *EventMessageRequestBuilder) Request() *EventMessageRequest {
	return &EventMessageRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// EventMessageRequest is request for EventMessage
type EventMessageRequest struct{ BaseRequest }

// Get performs GET request for EventMessage
func (r *EventMessageRequest) Get(ctx context.Context) (resObj *EventMessage, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for EventMessage
func (r *EventMessageRequest) Update(ctx context.Context, reqObj *EventMessage) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for EventMessage
func (r *EventMessageRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// Event is navigation property
func (b *EventMessageRequestBuilder) Event() *EventRequestBuilder {
	bb := &EventRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/event"
	return bb
}
