// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// MdmWindowsInformationProtectionPolicy Policy for Windows information protection with MDM
type MdmWindowsInformationProtectionPolicy struct {
	// WindowsInformationProtection is the base model of MdmWindowsInformationProtectionPolicy
	WindowsInformationProtection
}

// MdmWindowsInformationProtectionPolicyCollectionHasPayloadLinksRequestParameter undocumented
type MdmWindowsInformationProtectionPolicyCollectionHasPayloadLinksRequestParameter struct {
	// PayloadIDs undocumented
	PayloadIDs []string `json:"payloadIds,omitempty"`
}

// MdmWindowsInformationProtectionPolicyRequestBuilder is request builder for MdmWindowsInformationProtectionPolicy
type MdmWindowsInformationProtectionPolicyRequestBuilder struct{ BaseRequestBuilder }

// Request returns MdmWindowsInformationProtectionPolicyRequest
func (b *MdmWindowsInformationProtectionPolicyRequestBuilder) Request() *MdmWindowsInformationProtectionPolicyRequest {
	return &MdmWindowsInformationProtectionPolicyRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// MdmWindowsInformationProtectionPolicyRequest is request for MdmWindowsInformationProtectionPolicy
type MdmWindowsInformationProtectionPolicyRequest struct{ BaseRequest }

// Get performs GET request for MdmWindowsInformationProtectionPolicy
func (r *MdmWindowsInformationProtectionPolicyRequest) Get(ctx context.Context) (resObj *MdmWindowsInformationProtectionPolicy, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for MdmWindowsInformationProtectionPolicy
func (r *MdmWindowsInformationProtectionPolicyRequest) Update(ctx context.Context, reqObj *MdmWindowsInformationProtectionPolicy) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for MdmWindowsInformationProtectionPolicy
func (r *MdmWindowsInformationProtectionPolicyRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

//
type MdmWindowsInformationProtectionPolicyCollectionHasPayloadLinksRequestBuilder struct{ BaseRequestBuilder }

// HasPayloadLinks action undocumented
func (b *DeviceAppManagementMdmWindowsInformationProtectionPoliciesCollectionRequestBuilder) HasPayloadLinks(reqObj *MdmWindowsInformationProtectionPolicyCollectionHasPayloadLinksRequestParameter) *MdmWindowsInformationProtectionPolicyCollectionHasPayloadLinksRequestBuilder {
	bb := &MdmWindowsInformationProtectionPolicyCollectionHasPayloadLinksRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/hasPayloadLinks"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type MdmWindowsInformationProtectionPolicyCollectionHasPayloadLinksRequest struct{ BaseRequest }

//
func (b *MdmWindowsInformationProtectionPolicyCollectionHasPayloadLinksRequestBuilder) Request() *MdmWindowsInformationProtectionPolicyCollectionHasPayloadLinksRequest {
	return &MdmWindowsInformationProtectionPolicyCollectionHasPayloadLinksRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *MdmWindowsInformationProtectionPolicyCollectionHasPayloadLinksRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]HasPayloadLinkResultItem, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []HasPayloadLinkResultItem
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []HasPayloadLinkResultItem
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

//
func (r *MdmWindowsInformationProtectionPolicyCollectionHasPayloadLinksRequest) Post(ctx context.Context) ([]HasPayloadLinkResultItem, error) {
	return r.Paging(ctx, "POST", "", r.requestObject)
}
