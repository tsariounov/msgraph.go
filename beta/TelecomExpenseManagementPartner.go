// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"time"
)

// TelecomExpenseManagementPartner telecomExpenseManagementPartner resources represent the metadata and status of a given TEM service. Once your organization has onboarded with a partner, the partner can be enabled or disabled to switch TEM functionality on or off.
type TelecomExpenseManagementPartner struct {
	// Entity is the base model of TelecomExpenseManagementPartner
	Entity
	// DisplayName Display name of the TEM partner.
	DisplayName *string `json:"displayName,omitempty"`
	// URL URL of the TEM partner's administrative control panel, where an administrator can configure their TEM service.
	URL *string `json:"url,omitempty"`
	// AppAuthorized Whether the partner's AAD app has been authorized to access Intune.
	AppAuthorized *bool `json:"appAuthorized,omitempty"`
	// Enabled Whether Intune's connection to the TEM service is currently enabled or disabled.
	Enabled *bool `json:"enabled,omitempty"`
	// LastConnectionDateTime Timestamp of the last request sent to Intune by the TEM partner.
	LastConnectionDateTime *time.Time `json:"lastConnectionDateTime,omitempty"`
}

// TelecomExpenseManagementPartnerRequestBuilder is request builder for TelecomExpenseManagementPartner
type TelecomExpenseManagementPartnerRequestBuilder struct{ BaseRequestBuilder }

// Request returns TelecomExpenseManagementPartnerRequest
func (b *TelecomExpenseManagementPartnerRequestBuilder) Request() *TelecomExpenseManagementPartnerRequest {
	return &TelecomExpenseManagementPartnerRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TelecomExpenseManagementPartnerRequest is request for TelecomExpenseManagementPartner
type TelecomExpenseManagementPartnerRequest struct{ BaseRequest }

// Get performs GET request for TelecomExpenseManagementPartner
func (r *TelecomExpenseManagementPartnerRequest) Get(ctx context.Context) (resObj *TelecomExpenseManagementPartner, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TelecomExpenseManagementPartner
func (r *TelecomExpenseManagementPartnerRequest) Update(ctx context.Context, reqObj *TelecomExpenseManagementPartner) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TelecomExpenseManagementPartner
func (r *TelecomExpenseManagementPartnerRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
