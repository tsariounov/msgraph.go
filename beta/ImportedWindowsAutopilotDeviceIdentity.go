// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// ImportedWindowsAutopilotDeviceIdentity Imported windows autopilot devices.
type ImportedWindowsAutopilotDeviceIdentity struct {
	// Entity is the base model of ImportedWindowsAutopilotDeviceIdentity
	Entity
	// OrderIdentifier Order Id of the Windows autopilot device. - Deprecate
	OrderIdentifier *string `json:"orderIdentifier,omitempty"`
	// GroupTag Group Tag of the Windows autopilot device.
	GroupTag *string `json:"groupTag,omitempty"`
	// SerialNumber Serial number of the Windows autopilot device.
	SerialNumber *string `json:"serialNumber,omitempty"`
	// ProductKey Product Key of the Windows autopilot device.
	ProductKey *string `json:"productKey,omitempty"`
	// ImportID The Import Id of the Windows autopilot device.
	ImportID *string `json:"importId,omitempty"`
	// HardwareIdentifier Hardware Blob of the Windows autopilot device.
	HardwareIdentifier *Binary `json:"hardwareIdentifier,omitempty"`
	// State Current state of the imported device.
	State *ImportedWindowsAutopilotDeviceIdentityState `json:"state,omitempty"`
	// AssignedUserPrincipalName UPN of the user the device will be assigned
	AssignedUserPrincipalName *string `json:"assignedUserPrincipalName,omitempty"`
}

// ImportedWindowsAutopilotDeviceIdentityCollectionImportRequestParameter undocumented
type ImportedWindowsAutopilotDeviceIdentityCollectionImportRequestParameter struct {
	// ImportedWindowsAutopilotDeviceIdentities undocumented
	ImportedWindowsAutopilotDeviceIdentities []ImportedWindowsAutopilotDeviceIdentity `json:"importedWindowsAutopilotDeviceIdentities,omitempty"`
}

// ImportedWindowsAutopilotDeviceIdentityRequestBuilder is request builder for ImportedWindowsAutopilotDeviceIdentity
type ImportedWindowsAutopilotDeviceIdentityRequestBuilder struct{ BaseRequestBuilder }

// Request returns ImportedWindowsAutopilotDeviceIdentityRequest
func (b *ImportedWindowsAutopilotDeviceIdentityRequestBuilder) Request() *ImportedWindowsAutopilotDeviceIdentityRequest {
	return &ImportedWindowsAutopilotDeviceIdentityRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ImportedWindowsAutopilotDeviceIdentityRequest is request for ImportedWindowsAutopilotDeviceIdentity
type ImportedWindowsAutopilotDeviceIdentityRequest struct{ BaseRequest }

// Get performs GET request for ImportedWindowsAutopilotDeviceIdentity
func (r *ImportedWindowsAutopilotDeviceIdentityRequest) Get(ctx context.Context) (resObj *ImportedWindowsAutopilotDeviceIdentity, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ImportedWindowsAutopilotDeviceIdentity
func (r *ImportedWindowsAutopilotDeviceIdentityRequest) Update(ctx context.Context, reqObj *ImportedWindowsAutopilotDeviceIdentity) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ImportedWindowsAutopilotDeviceIdentity
func (r *ImportedWindowsAutopilotDeviceIdentityRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

//
type ImportedWindowsAutopilotDeviceIdentityCollectionImportRequestBuilder struct{ BaseRequestBuilder }

// Import action undocumented
func (b *DeviceManagementImportedWindowsAutopilotDeviceIdentitiesCollectionRequestBuilder) Import(reqObj *ImportedWindowsAutopilotDeviceIdentityCollectionImportRequestParameter) *ImportedWindowsAutopilotDeviceIdentityCollectionImportRequestBuilder {
	bb := &ImportedWindowsAutopilotDeviceIdentityCollectionImportRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/import"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

// Import action undocumented
func (b *ImportedWindowsAutopilotDeviceIdentityUploadDeviceIdentitiesCollectionRequestBuilder) Import(reqObj *ImportedWindowsAutopilotDeviceIdentityCollectionImportRequestParameter) *ImportedWindowsAutopilotDeviceIdentityCollectionImportRequestBuilder {
	bb := &ImportedWindowsAutopilotDeviceIdentityCollectionImportRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/import"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type ImportedWindowsAutopilotDeviceIdentityCollectionImportRequest struct{ BaseRequest }

//
func (b *ImportedWindowsAutopilotDeviceIdentityCollectionImportRequestBuilder) Request() *ImportedWindowsAutopilotDeviceIdentityCollectionImportRequest {
	return &ImportedWindowsAutopilotDeviceIdentityCollectionImportRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *ImportedWindowsAutopilotDeviceIdentityCollectionImportRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]ImportedWindowsAutopilotDeviceIdentity, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ImportedWindowsAutopilotDeviceIdentity
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ImportedWindowsAutopilotDeviceIdentity
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

//
func (r *ImportedWindowsAutopilotDeviceIdentityCollectionImportRequest) Post(ctx context.Context) ([]ImportedWindowsAutopilotDeviceIdentity, error) {
	return r.Paging(ctx, "POST", "", r.requestObject)
}
