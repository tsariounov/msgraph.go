// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"time"
)

// DataSharingConsent Data sharing consent information.
type DataSharingConsent struct {
	// Entity is the base model of DataSharingConsent
	Entity
	// ServiceDisplayName The display name of the service work flow
	ServiceDisplayName *string `json:"serviceDisplayName,omitempty"`
	// TermsURL The TermsUrl for the data sharing consent
	TermsURL *string `json:"termsUrl,omitempty"`
	// Granted The granted state for the data sharing consent
	Granted *bool `json:"granted,omitempty"`
	// GrantDateTime The time consent was granted for this account
	GrantDateTime *time.Time `json:"grantDateTime,omitempty"`
	// GrantedByUpn The Upn of the user that granted consent for this account
	GrantedByUpn *string `json:"grantedByUpn,omitempty"`
	// GrantedByUserID The UserId of the user that granted consent for this account
	GrantedByUserID *string `json:"grantedByUserId,omitempty"`
}

// DataSharingConsentConsentToDataSharingRequestParameter undocumented
type DataSharingConsentConsentToDataSharingRequestParameter struct {
}

// DataSharingConsentRequestBuilder is request builder for DataSharingConsent
type DataSharingConsentRequestBuilder struct{ BaseRequestBuilder }

// Request returns DataSharingConsentRequest
func (b *DataSharingConsentRequestBuilder) Request() *DataSharingConsentRequest {
	return &DataSharingConsentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DataSharingConsentRequest is request for DataSharingConsent
type DataSharingConsentRequest struct{ BaseRequest }

// Get performs GET request for DataSharingConsent
func (r *DataSharingConsentRequest) Get(ctx context.Context) (resObj *DataSharingConsent, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DataSharingConsent
func (r *DataSharingConsentRequest) Update(ctx context.Context, reqObj *DataSharingConsent) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DataSharingConsent
func (r *DataSharingConsentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

//
type DataSharingConsentConsentToDataSharingRequestBuilder struct{ BaseRequestBuilder }

// ConsentToDataSharing action undocumented
func (b *DataSharingConsentRequestBuilder) ConsentToDataSharing(reqObj *DataSharingConsentConsentToDataSharingRequestParameter) *DataSharingConsentConsentToDataSharingRequestBuilder {
	bb := &DataSharingConsentConsentToDataSharingRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/consentToDataSharing"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type DataSharingConsentConsentToDataSharingRequest struct{ BaseRequest }

//
func (b *DataSharingConsentConsentToDataSharingRequestBuilder) Request() *DataSharingConsentConsentToDataSharingRequest {
	return &DataSharingConsentConsentToDataSharingRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *DataSharingConsentConsentToDataSharingRequest) Post(ctx context.Context) (resObj *DataSharingConsent, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}
