// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import "context"

// AndroidVpnConfiguration By providing the configurations in this profile you can instruct the Android device to connect to desired VPN endpoint. By specifying the authentication method and security types expected by VPN endpoint you can make the VPN connection seamless for end user.
type AndroidVpnConfiguration struct {
	// DeviceConfiguration is the base model of AndroidVpnConfiguration
	DeviceConfiguration
	// ConnectionName Connection name displayed to the user.
	ConnectionName *string `json:"connectionName,omitempty"`
	// ConnectionType Connection type.
	ConnectionType *AndroidVpnConnectionType `json:"connectionType,omitempty"`
	// Role Role when connection type is set to Pulse Secure.
	Role *string `json:"role,omitempty"`
	// Realm Realm when connection type is set to Pulse Secure.
	Realm *string `json:"realm,omitempty"`
	// Servers List of VPN Servers on the network. Make sure end users can access these network locations. This collection can contain a maximum of 500 elements.
	Servers []VpnServer `json:"servers,omitempty"`
	// Fingerprint Fingerprint is a string that will be used to verify the VPN server can be trusted, which is only applicable when connection type is Check Point Capsule VPN.
	Fingerprint *string `json:"fingerprint,omitempty"`
	// CustomData Custom data when connection type is set to Citrix. This collection can contain a maximum of 25 elements.
	CustomData []KeyValue `json:"customData,omitempty"`
	// CustomKeyValueData Custom data when connection type is set to Citrix. This collection can contain a maximum of 25 elements.
	CustomKeyValueData []KeyValuePair `json:"customKeyValueData,omitempty"`
	// AuthenticationMethod Authentication method.
	AuthenticationMethod *VpnAuthenticationMethod `json:"authenticationMethod,omitempty"`
	// IdentityCertificate undocumented
	IdentityCertificate *AndroidCertificateProfileBase `json:"identityCertificate,omitempty"`
}

// AndroidVpnConfigurationRequestBuilder is request builder for AndroidVpnConfiguration
type AndroidVpnConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns AndroidVpnConfigurationRequest
func (b *AndroidVpnConfigurationRequestBuilder) Request() *AndroidVpnConfigurationRequest {
	return &AndroidVpnConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AndroidVpnConfigurationRequest is request for AndroidVpnConfiguration
type AndroidVpnConfigurationRequest struct{ BaseRequest }

// Get performs GET request for AndroidVpnConfiguration
func (r *AndroidVpnConfigurationRequest) Get(ctx context.Context) (resObj *AndroidVpnConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AndroidVpnConfiguration
func (r *AndroidVpnConfigurationRequest) Update(ctx context.Context, reqObj *AndroidVpnConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AndroidVpnConfiguration
func (r *AndroidVpnConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// IdentityCertificate is navigation property
func (b *AndroidVpnConfigurationRequestBuilder) IdentityCertificate() *AndroidCertificateProfileBaseRequestBuilder {
	bb := &AndroidCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificate"
	return bb
}
