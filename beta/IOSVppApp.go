// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// IOSVppApp Contains properties and inherited properties for iOS Volume-Purchased Program (VPP) Apps.
type IOSVppApp struct {
	// MobileApp is the base model of IOSVppApp
	MobileApp
	// UsedLicenseCount The number of VPP licenses in use.
	UsedLicenseCount *int `json:"usedLicenseCount,omitempty"`
	// TotalLicenseCount The total number of VPP licenses.
	TotalLicenseCount *int `json:"totalLicenseCount,omitempty"`
	// ReleaseDateTime The VPP application release date and time.
	ReleaseDateTime *time.Time `json:"releaseDateTime,omitempty"`
	// AppStoreURL The store URL.
	AppStoreURL *string `json:"appStoreUrl,omitempty"`
	// LicensingType The supported License Type.
	LicensingType *VppLicensingType `json:"licensingType,omitempty"`
	// ApplicableDeviceType The applicable iOS Device Type.
	ApplicableDeviceType *IOSDeviceType `json:"applicableDeviceType,omitempty"`
	// VppTokenOrganizationName The organization associated with the Apple Volume Purchase Program Token
	VppTokenOrganizationName *string `json:"vppTokenOrganizationName,omitempty"`
	// VppTokenAccountType The type of volume purchase program which the given Apple Volume Purchase Program Token is associated with. Possible values are: `business`, `education`.
	VppTokenAccountType *VppTokenAccountType `json:"vppTokenAccountType,omitempty"`
	// VppTokenAppleID The Apple Id associated with the given Apple Volume Purchase Program Token.
	VppTokenAppleID *string `json:"vppTokenAppleId,omitempty"`
	// BundleID The Identity Name.
	BundleID *string `json:"bundleId,omitempty"`
	// VppTokenID Identifier of the VPP token associated with this app.
	VppTokenID *string `json:"vppTokenId,omitempty"`
	// RevokeLicenseActionResults Results of revoke license actions on this app.
	RevokeLicenseActionResults []IOSVppAppRevokeLicensesActionResult `json:"revokeLicenseActionResults,omitempty"`
	// AssignedLicenses undocumented
	AssignedLicenses []IOSVppAppAssignedLicense `json:"assignedLicenses,omitempty"`
}

// IOSVppAppRevokeAllLicensesRequestParameter undocumented
type IOSVppAppRevokeAllLicensesRequestParameter struct {
	// NotifyManagedDevices undocumented
	NotifyManagedDevices *bool `json:"notifyManagedDevices,omitempty"`
}

// IOSVppAppRevokeUserLicenseRequestParameter undocumented
type IOSVppAppRevokeUserLicenseRequestParameter struct {
	// UserID undocumented
	UserID *string `json:"userId,omitempty"`
	// NotifyManagedDevices undocumented
	NotifyManagedDevices *bool `json:"notifyManagedDevices,omitempty"`
}

// IOSVppAppRevokeDeviceLicenseRequestParameter undocumented
type IOSVppAppRevokeDeviceLicenseRequestParameter struct {
	// ManagedDeviceID undocumented
	ManagedDeviceID *string `json:"managedDeviceId,omitempty"`
	// NotifyManagedDevices undocumented
	NotifyManagedDevices *bool `json:"notifyManagedDevices,omitempty"`
}

// IOSVppAppRequestBuilder is request builder for IOSVppApp
type IOSVppAppRequestBuilder struct{ BaseRequestBuilder }

// Request returns IOSVppAppRequest
func (b *IOSVppAppRequestBuilder) Request() *IOSVppAppRequest {
	return &IOSVppAppRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// IOSVppAppRequest is request for IOSVppApp
type IOSVppAppRequest struct{ BaseRequest }

// Get performs GET request for IOSVppApp
func (r *IOSVppAppRequest) Get(ctx context.Context) (resObj *IOSVppApp, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for IOSVppApp
func (r *IOSVppAppRequest) Update(ctx context.Context, reqObj *IOSVppApp) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for IOSVppApp
func (r *IOSVppAppRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// AssignedLicenses returns request builder for IOSVppAppAssignedLicense collection
func (b *IOSVppAppRequestBuilder) AssignedLicenses() *IOSVppAppAssignedLicensesCollectionRequestBuilder {
	bb := &IOSVppAppAssignedLicensesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/assignedLicenses"
	return bb
}

// IOSVppAppAssignedLicensesCollectionRequestBuilder is request builder for IOSVppAppAssignedLicense collection
type IOSVppAppAssignedLicensesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for IOSVppAppAssignedLicense collection
func (b *IOSVppAppAssignedLicensesCollectionRequestBuilder) Request() *IOSVppAppAssignedLicensesCollectionRequest {
	return &IOSVppAppAssignedLicensesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for IOSVppAppAssignedLicense item
func (b *IOSVppAppAssignedLicensesCollectionRequestBuilder) ID(id string) *IOSVppAppAssignedLicenseRequestBuilder {
	bb := &IOSVppAppAssignedLicenseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// IOSVppAppAssignedLicensesCollectionRequest is request for IOSVppAppAssignedLicense collection
type IOSVppAppAssignedLicensesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for IOSVppAppAssignedLicense collection
func (r *IOSVppAppAssignedLicensesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]IOSVppAppAssignedLicense, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []IOSVppAppAssignedLicense
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []IOSVppAppAssignedLicense
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for IOSVppAppAssignedLicense collection
func (r *IOSVppAppAssignedLicensesCollectionRequest) Get(ctx context.Context) ([]IOSVppAppAssignedLicense, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil)
}

// Add performs POST request for IOSVppAppAssignedLicense collection
func (r *IOSVppAppAssignedLicensesCollectionRequest) Add(ctx context.Context, reqObj *IOSVppAppAssignedLicense) (resObj *IOSVppAppAssignedLicense, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

//
type IOSVppAppRevokeAllLicensesRequestBuilder struct{ BaseRequestBuilder }

// RevokeAllLicenses action undocumented
func (b *IOSVppAppRequestBuilder) RevokeAllLicenses(reqObj *IOSVppAppRevokeAllLicensesRequestParameter) *IOSVppAppRevokeAllLicensesRequestBuilder {
	bb := &IOSVppAppRevokeAllLicensesRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/revokeAllLicenses"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type IOSVppAppRevokeAllLicensesRequest struct{ BaseRequest }

//
func (b *IOSVppAppRevokeAllLicensesRequestBuilder) Request() *IOSVppAppRevokeAllLicensesRequest {
	return &IOSVppAppRevokeAllLicensesRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *IOSVppAppRevokeAllLicensesRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

//
type IOSVppAppRevokeUserLicenseRequestBuilder struct{ BaseRequestBuilder }

// RevokeUserLicense action undocumented
func (b *IOSVppAppRequestBuilder) RevokeUserLicense(reqObj *IOSVppAppRevokeUserLicenseRequestParameter) *IOSVppAppRevokeUserLicenseRequestBuilder {
	bb := &IOSVppAppRevokeUserLicenseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/revokeUserLicense"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type IOSVppAppRevokeUserLicenseRequest struct{ BaseRequest }

//
func (b *IOSVppAppRevokeUserLicenseRequestBuilder) Request() *IOSVppAppRevokeUserLicenseRequest {
	return &IOSVppAppRevokeUserLicenseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *IOSVppAppRevokeUserLicenseRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

//
type IOSVppAppRevokeDeviceLicenseRequestBuilder struct{ BaseRequestBuilder }

// RevokeDeviceLicense action undocumented
func (b *IOSVppAppRequestBuilder) RevokeDeviceLicense(reqObj *IOSVppAppRevokeDeviceLicenseRequestParameter) *IOSVppAppRevokeDeviceLicenseRequestBuilder {
	bb := &IOSVppAppRevokeDeviceLicenseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/revokeDeviceLicense"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type IOSVppAppRevokeDeviceLicenseRequest struct{ BaseRequest }

//
func (b *IOSVppAppRevokeDeviceLicenseRequestBuilder) Request() *IOSVppAppRevokeDeviceLicenseRequest {
	return &IOSVppAppRevokeDeviceLicenseRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *IOSVppAppRevokeDeviceLicenseRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
