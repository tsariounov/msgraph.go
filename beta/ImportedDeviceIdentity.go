// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// ImportedDeviceIdentity The importedDeviceIdentity resource represents a unique hardware identity of a device that has been pre-staged for pre-enrollment configuration.
type ImportedDeviceIdentity struct {
	// Entity is the base model of ImportedDeviceIdentity
	Entity
	// ImportedDeviceIdentifier Imported Device Identifier
	ImportedDeviceIdentifier *string `json:"importedDeviceIdentifier,omitempty"`
	// ImportedDeviceIdentityType Type of Imported Device Identity
	ImportedDeviceIdentityType *ImportedDeviceIdentityType `json:"importedDeviceIdentityType,omitempty"`
	// LastModifiedDateTime Last Modified DateTime of the description
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`
	// CreatedDateTime Created Date Time of the device
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	// LastContactedDateTime Last Contacted Date Time of the device
	LastContactedDateTime *time.Time `json:"lastContactedDateTime,omitempty"`
	// Description The description of the device
	Description *string `json:"description,omitempty"`
	// EnrollmentState The state of the device in Intune
	EnrollmentState *EnrollmentState `json:"enrollmentState,omitempty"`
	// Platform The platform of the Device.
	Platform *Platform `json:"platform,omitempty"`
}

// ImportedDeviceIdentityCollectionImportDeviceIdentityListRequestParameter undocumented
type ImportedDeviceIdentityCollectionImportDeviceIdentityListRequestParameter struct {
	// ImportedDeviceIdentities undocumented
	ImportedDeviceIdentities []ImportedDeviceIdentity `json:"importedDeviceIdentities,omitempty"`
	// OverwriteImportedDeviceIdentities undocumented
	OverwriteImportedDeviceIdentities *bool `json:"overwriteImportedDeviceIdentities,omitempty"`
}

// ImportedDeviceIdentityCollectionSearchExistingIdentitiesRequestParameter undocumented
type ImportedDeviceIdentityCollectionSearchExistingIdentitiesRequestParameter struct {
	// ImportedDeviceIdentities undocumented
	ImportedDeviceIdentities []ImportedDeviceIdentity `json:"importedDeviceIdentities,omitempty"`
}

// ImportedDeviceIdentityRequestBuilder is request builder for ImportedDeviceIdentity
type ImportedDeviceIdentityRequestBuilder struct{ BaseRequestBuilder }

// Request returns ImportedDeviceIdentityRequest
func (b *ImportedDeviceIdentityRequestBuilder) Request() *ImportedDeviceIdentityRequest {
	return &ImportedDeviceIdentityRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ImportedDeviceIdentityRequest is request for ImportedDeviceIdentity
type ImportedDeviceIdentityRequest struct{ BaseRequest }

// Get performs GET request for ImportedDeviceIdentity
func (r *ImportedDeviceIdentityRequest) Get(ctx context.Context) (resObj *ImportedDeviceIdentity, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ImportedDeviceIdentity
func (r *ImportedDeviceIdentityRequest) Update(ctx context.Context, reqObj *ImportedDeviceIdentity) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ImportedDeviceIdentity
func (r *ImportedDeviceIdentityRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

//
type ImportedDeviceIdentityCollectionImportDeviceIdentityListRequestBuilder struct{ BaseRequestBuilder }

// ImportDeviceIdentityList action undocumented
func (b *DeviceManagementImportedDeviceIdentitiesCollectionRequestBuilder) ImportDeviceIdentityList(reqObj *ImportedDeviceIdentityCollectionImportDeviceIdentityListRequestParameter) *ImportedDeviceIdentityCollectionImportDeviceIdentityListRequestBuilder {
	bb := &ImportedDeviceIdentityCollectionImportDeviceIdentityListRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/importDeviceIdentityList"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type ImportedDeviceIdentityCollectionImportDeviceIdentityListRequest struct{ BaseRequest }

//
func (b *ImportedDeviceIdentityCollectionImportDeviceIdentityListRequestBuilder) Request() *ImportedDeviceIdentityCollectionImportDeviceIdentityListRequest {
	return &ImportedDeviceIdentityCollectionImportDeviceIdentityListRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *ImportedDeviceIdentityCollectionImportDeviceIdentityListRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]ImportedDeviceIdentityResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ImportedDeviceIdentityResult
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ImportedDeviceIdentityResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

//
func (r *ImportedDeviceIdentityCollectionImportDeviceIdentityListRequest) Post(ctx context.Context) ([]ImportedDeviceIdentityResult, error) {
	return r.Paging(ctx, "POST", "", r.requestObject)
}

//
type ImportedDeviceIdentityCollectionSearchExistingIdentitiesRequestBuilder struct{ BaseRequestBuilder }

// SearchExistingIdentities action undocumented
func (b *DeviceManagementImportedDeviceIdentitiesCollectionRequestBuilder) SearchExistingIdentities(reqObj *ImportedDeviceIdentityCollectionSearchExistingIdentitiesRequestParameter) *ImportedDeviceIdentityCollectionSearchExistingIdentitiesRequestBuilder {
	bb := &ImportedDeviceIdentityCollectionSearchExistingIdentitiesRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/searchExistingIdentities"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type ImportedDeviceIdentityCollectionSearchExistingIdentitiesRequest struct{ BaseRequest }

//
func (b *ImportedDeviceIdentityCollectionSearchExistingIdentitiesRequestBuilder) Request() *ImportedDeviceIdentityCollectionSearchExistingIdentitiesRequest {
	return &ImportedDeviceIdentityCollectionSearchExistingIdentitiesRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *ImportedDeviceIdentityCollectionSearchExistingIdentitiesRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]ImportedDeviceIdentity, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ImportedDeviceIdentity
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ImportedDeviceIdentity
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

//
func (r *ImportedDeviceIdentityCollectionSearchExistingIdentitiesRequest) Post(ctx context.Context) ([]ImportedDeviceIdentity, error) {
	return r.Paging(ctx, "POST", "", r.requestObject)
}
