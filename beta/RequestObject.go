// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// RequestObject undocumented
type RequestObject struct {
	// Entity is the base model of RequestObject
	Entity
	// DisplayName undocumented
	DisplayName *string `json:"displayName,omitempty"`
	// Description undocumented
	Description *string `json:"description,omitempty"`
	// StartDateTime undocumented
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
	// EndDateTime undocumented
	EndDateTime *time.Time `json:"endDateTime,omitempty"`
	// Status undocumented
	Status *string `json:"status,omitempty"`
	// BusinessFlowID undocumented
	BusinessFlowID *string `json:"businessFlowId,omitempty"`
	// CreatedBy undocumented
	CreatedBy *UserIdentity `json:"createdBy,omitempty"`
	// DeDuplicationID undocumented
	DeDuplicationID *string `json:"deDuplicationId,omitempty"`
	// SchemaID undocumented
	SchemaID *string `json:"schemaId,omitempty"`
	// CustomData undocumented
	CustomData *string `json:"customData,omitempty"`
	// RecordVersion undocumented
	RecordVersion *string `json:"recordVersion,omitempty"`
	// PolicyTemplateID undocumented
	PolicyTemplateID *string `json:"policyTemplateId,omitempty"`
	// Policy undocumented
	Policy *GovernancePolicy `json:"policy,omitempty"`
	// Settings undocumented
	Settings *AccessReviewSettings `json:"settings,omitempty"`
	// Decisions undocumented
	Decisions []AccessReviewDecision `json:"decisions,omitempty"`
	// MyDecisions undocumented
	MyDecisions []AccessReviewDecision `json:"myDecisions,omitempty"`
}

// RequestObjectStopRequestParameter undocumented
type RequestObjectStopRequestParameter struct {
}

// RequestObjectRecordDecisionsRequestParameter undocumented
type RequestObjectRecordDecisionsRequestParameter struct {
	// ReviewResult undocumented
	ReviewResult *string `json:"reviewResult,omitempty"`
	// Justification undocumented
	Justification *string `json:"justification,omitempty"`
}

// RequestObjectRequestBuilder is request builder for RequestObject
type RequestObjectRequestBuilder struct{ BaseRequestBuilder }

// Request returns RequestObjectRequest
func (b *RequestObjectRequestBuilder) Request() *RequestObjectRequest {
	return &RequestObjectRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// RequestObjectRequest is request for RequestObject
type RequestObjectRequest struct{ BaseRequest }

// Get performs GET request for RequestObject
func (r *RequestObjectRequest) Get(ctx context.Context) (resObj *RequestObject, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for RequestObject
func (r *RequestObjectRequest) Update(ctx context.Context, reqObj *RequestObject) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for RequestObject
func (r *RequestObjectRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// Decisions returns request builder for AccessReviewDecision collection
func (b *RequestObjectRequestBuilder) Decisions() *RequestObjectDecisionsCollectionRequestBuilder {
	bb := &RequestObjectDecisionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/decisions"
	return bb
}

// RequestObjectDecisionsCollectionRequestBuilder is request builder for AccessReviewDecision collection
type RequestObjectDecisionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessReviewDecision collection
func (b *RequestObjectDecisionsCollectionRequestBuilder) Request() *RequestObjectDecisionsCollectionRequest {
	return &RequestObjectDecisionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessReviewDecision item
func (b *RequestObjectDecisionsCollectionRequestBuilder) ID(id string) *AccessReviewDecisionRequestBuilder {
	bb := &AccessReviewDecisionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RequestObjectDecisionsCollectionRequest is request for AccessReviewDecision collection
type RequestObjectDecisionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessReviewDecision collection
func (r *RequestObjectDecisionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]AccessReviewDecision, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessReviewDecision
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessReviewDecision
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for AccessReviewDecision collection
func (r *RequestObjectDecisionsCollectionRequest) Get(ctx context.Context) ([]AccessReviewDecision, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil)
}

// Add performs POST request for AccessReviewDecision collection
func (r *RequestObjectDecisionsCollectionRequest) Add(ctx context.Context, reqObj *AccessReviewDecision) (resObj *AccessReviewDecision, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

// MyDecisions returns request builder for AccessReviewDecision collection
func (b *RequestObjectRequestBuilder) MyDecisions() *RequestObjectMyDecisionsCollectionRequestBuilder {
	bb := &RequestObjectMyDecisionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/myDecisions"
	return bb
}

// RequestObjectMyDecisionsCollectionRequestBuilder is request builder for AccessReviewDecision collection
type RequestObjectMyDecisionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for AccessReviewDecision collection
func (b *RequestObjectMyDecisionsCollectionRequestBuilder) Request() *RequestObjectMyDecisionsCollectionRequest {
	return &RequestObjectMyDecisionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for AccessReviewDecision item
func (b *RequestObjectMyDecisionsCollectionRequestBuilder) ID(id string) *AccessReviewDecisionRequestBuilder {
	bb := &AccessReviewDecisionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// RequestObjectMyDecisionsCollectionRequest is request for AccessReviewDecision collection
type RequestObjectMyDecisionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for AccessReviewDecision collection
func (r *RequestObjectMyDecisionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]AccessReviewDecision, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []AccessReviewDecision
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []AccessReviewDecision
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for AccessReviewDecision collection
func (r *RequestObjectMyDecisionsCollectionRequest) Get(ctx context.Context) ([]AccessReviewDecision, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil)
}

// Add performs POST request for AccessReviewDecision collection
func (r *RequestObjectMyDecisionsCollectionRequest) Add(ctx context.Context, reqObj *AccessReviewDecision) (resObj *AccessReviewDecision, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

//
type RequestObjectStopRequestBuilder struct{ BaseRequestBuilder }

// Stop action undocumented
func (b *RequestObjectRequestBuilder) Stop(reqObj *RequestObjectStopRequestParameter) *RequestObjectStopRequestBuilder {
	bb := &RequestObjectStopRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/stop"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type RequestObjectStopRequest struct{ BaseRequest }

//
func (b *RequestObjectStopRequestBuilder) Request() *RequestObjectStopRequest {
	return &RequestObjectStopRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *RequestObjectStopRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}

//
type RequestObjectRecordDecisionsRequestBuilder struct{ BaseRequestBuilder }

// RecordDecisions action undocumented
func (b *RequestObjectRequestBuilder) RecordDecisions(reqObj *RequestObjectRecordDecisionsRequestParameter) *RequestObjectRecordDecisionsRequestBuilder {
	bb := &RequestObjectRecordDecisionsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/recordDecisions"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type RequestObjectRecordDecisionsRequest struct{ BaseRequest }

//
func (b *RequestObjectRecordDecisionsRequestBuilder) Request() *RequestObjectRecordDecisionsRequest {
	return &RequestObjectRecordDecisionsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *RequestObjectRecordDecisionsRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
