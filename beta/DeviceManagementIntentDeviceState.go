// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"time"
)

// DeviceManagementIntentDeviceState Entity that represents device state for an intent
type DeviceManagementIntentDeviceState struct {
	// Entity is the base model of DeviceManagementIntentDeviceState
	Entity
	// UserPrincipalName The user principal name that is being reported on a device
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
	// UserName The user name that is being reported on a device
	UserName *string `json:"userName,omitempty"`
	// DeviceDisplayName Device name that is being reported
	DeviceDisplayName *string `json:"deviceDisplayName,omitempty"`
	// LastReportedDateTime Last modified date time of an intent report
	LastReportedDateTime *time.Time `json:"lastReportedDateTime,omitempty"`
	// State Device state for an intent
	State *ComplianceStatus `json:"state,omitempty"`
	// DeviceID Device id that is being reported
	DeviceID *string `json:"deviceId,omitempty"`
}

// DeviceManagementIntentDeviceStateRequestBuilder is request builder for DeviceManagementIntentDeviceState
type DeviceManagementIntentDeviceStateRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceManagementIntentDeviceStateRequest
func (b *DeviceManagementIntentDeviceStateRequestBuilder) Request() *DeviceManagementIntentDeviceStateRequest {
	return &DeviceManagementIntentDeviceStateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceManagementIntentDeviceStateRequest is request for DeviceManagementIntentDeviceState
type DeviceManagementIntentDeviceStateRequest struct{ BaseRequest }

// Get performs GET request for DeviceManagementIntentDeviceState
func (r *DeviceManagementIntentDeviceStateRequest) Get(ctx context.Context) (resObj *DeviceManagementIntentDeviceState, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceManagementIntentDeviceState
func (r *DeviceManagementIntentDeviceStateRequest) Update(ctx context.Context, reqObj *DeviceManagementIntentDeviceState) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceManagementIntentDeviceState
func (r *DeviceManagementIntentDeviceStateRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
