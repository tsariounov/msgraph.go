// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"time"
)

// AgreementAcceptance undocumented
type AgreementAcceptance struct {
	// Entity is the base model of AgreementAcceptance
	Entity
	// AgreementID undocumented
	AgreementID *string `json:"agreementId,omitempty"`
	// UserID undocumented
	UserID *string `json:"userId,omitempty"`
	// AgreementFileID undocumented
	AgreementFileID *string `json:"agreementFileId,omitempty"`
	// RecordedDateTime undocumented
	RecordedDateTime *time.Time `json:"recordedDateTime,omitempty"`
	// UserDisplayName undocumented
	UserDisplayName *string `json:"userDisplayName,omitempty"`
	// UserPrincipalName undocumented
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
	// UserEmail undocumented
	UserEmail *string `json:"userEmail,omitempty"`
	// State undocumented
	State *AgreementAcceptanceState `json:"state,omitempty"`
}

// AgreementAcceptanceRequestBuilder is request builder for AgreementAcceptance
type AgreementAcceptanceRequestBuilder struct{ BaseRequestBuilder }

// Request returns AgreementAcceptanceRequest
func (b *AgreementAcceptanceRequestBuilder) Request() *AgreementAcceptanceRequest {
	return &AgreementAcceptanceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AgreementAcceptanceRequest is request for AgreementAcceptance
type AgreementAcceptanceRequest struct{ BaseRequest }

// Get performs GET request for AgreementAcceptance
func (r *AgreementAcceptanceRequest) Get(ctx context.Context) (resObj *AgreementAcceptance, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AgreementAcceptance
func (r *AgreementAcceptanceRequest) Update(ctx context.Context, reqObj *AgreementAcceptance) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AgreementAcceptance
func (r *AgreementAcceptanceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
