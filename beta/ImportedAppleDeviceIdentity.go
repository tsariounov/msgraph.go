// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// ImportedAppleDeviceIdentity The importedAppleDeviceIdentity resource represents the imported device identity of an Apple device .
type ImportedAppleDeviceIdentity struct {
	// Entity is the base model of ImportedAppleDeviceIdentity
	Entity
	// SerialNumber Device serial number
	SerialNumber *string `json:"serialNumber,omitempty"`
	// RequestedEnrollmentProfileID Enrollment profile Id admin intends to apply to the device during next enrollment
	RequestedEnrollmentProfileID *string `json:"requestedEnrollmentProfileId,omitempty"`
	// RequestedEnrollmentProfileAssignmentDateTime The time enrollment profile was assigned to the device
	RequestedEnrollmentProfileAssignmentDateTime *time.Time `json:"requestedEnrollmentProfileAssignmentDateTime,omitempty"`
	// IsSupervised Indicates if the Apple device is supervised. More information is at: https://support.apple.com/en-us/HT202837
	IsSupervised *bool `json:"isSupervised,omitempty"`
	// DiscoverySource Apple device discovery source.
	DiscoverySource *DiscoverySource `json:"discoverySource,omitempty"`
	// IsDeleted Indicates if the device is deleted from Apple Business Manager
	IsDeleted *bool `json:"isDeleted,omitempty"`
	// CreatedDateTime Created Date Time of the device
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	// LastContactedDateTime Last Contacted Date Time of the device
	LastContactedDateTime *time.Time `json:"lastContactedDateTime,omitempty"`
	// Description The description of the device
	Description *string `json:"description,omitempty"`
	// EnrollmentState The state of the device in Intune
	EnrollmentState *EnrollmentState `json:"enrollmentState,omitempty"`
	// Platform The platform of the Device.
	Platform *Platform `json:"platform,omitempty"`
}

// ImportedAppleDeviceIdentityCollectionImportAppleDeviceIdentityListRequestParameter undocumented
type ImportedAppleDeviceIdentityCollectionImportAppleDeviceIdentityListRequestParameter struct {
	// ImportedAppleDeviceIdentities undocumented
	ImportedAppleDeviceIdentities []ImportedAppleDeviceIdentity `json:"importedAppleDeviceIdentities,omitempty"`
	// OverwriteImportedDeviceIdentities undocumented
	OverwriteImportedDeviceIdentities *bool `json:"overwriteImportedDeviceIdentities,omitempty"`
}

// ImportedAppleDeviceIdentityRequestBuilder is request builder for ImportedAppleDeviceIdentity
type ImportedAppleDeviceIdentityRequestBuilder struct{ BaseRequestBuilder }

// Request returns ImportedAppleDeviceIdentityRequest
func (b *ImportedAppleDeviceIdentityRequestBuilder) Request() *ImportedAppleDeviceIdentityRequest {
	return &ImportedAppleDeviceIdentityRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ImportedAppleDeviceIdentityRequest is request for ImportedAppleDeviceIdentity
type ImportedAppleDeviceIdentityRequest struct{ BaseRequest }

// Get performs GET request for ImportedAppleDeviceIdentity
func (r *ImportedAppleDeviceIdentityRequest) Get(ctx context.Context) (resObj *ImportedAppleDeviceIdentity, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ImportedAppleDeviceIdentity
func (r *ImportedAppleDeviceIdentityRequest) Update(ctx context.Context, reqObj *ImportedAppleDeviceIdentity) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ImportedAppleDeviceIdentity
func (r *ImportedAppleDeviceIdentityRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

//
type ImportedAppleDeviceIdentityCollectionImportAppleDeviceIdentityListRequestBuilder struct{ BaseRequestBuilder }

// ImportAppleDeviceIdentityList action undocumented
func (b *DepOnboardingSettingImportedAppleDeviceIdentitiesCollectionRequestBuilder) ImportAppleDeviceIdentityList(reqObj *ImportedAppleDeviceIdentityCollectionImportAppleDeviceIdentityListRequestParameter) *ImportedAppleDeviceIdentityCollectionImportAppleDeviceIdentityListRequestBuilder {
	bb := &ImportedAppleDeviceIdentityCollectionImportAppleDeviceIdentityListRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/importAppleDeviceIdentityList"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type ImportedAppleDeviceIdentityCollectionImportAppleDeviceIdentityListRequest struct{ BaseRequest }

//
func (b *ImportedAppleDeviceIdentityCollectionImportAppleDeviceIdentityListRequestBuilder) Request() *ImportedAppleDeviceIdentityCollectionImportAppleDeviceIdentityListRequest {
	return &ImportedAppleDeviceIdentityCollectionImportAppleDeviceIdentityListRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *ImportedAppleDeviceIdentityCollectionImportAppleDeviceIdentityListRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]ImportedAppleDeviceIdentityResult, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ImportedAppleDeviceIdentityResult
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ImportedAppleDeviceIdentityResult
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

//
func (r *ImportedAppleDeviceIdentityCollectionImportAppleDeviceIdentityListRequest) Post(ctx context.Context) ([]ImportedAppleDeviceIdentityResult, error) {
	return r.Paging(ctx, "POST", "", r.requestObject)
}
