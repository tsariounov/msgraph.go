// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// NotificationMessageTemplate Notification messages are messages that are sent to end users who are determined to be not-compliant with the compliance policies defined by the administrator. Administrators choose notifications and configure them in the Intune Admin Console using the compliance policy creation page under the “Actions for non-compliance” section. Use the notificationMessageTemplate object to create your own custom notifications for administrators to choose while configuring actions for non-compliance.
type NotificationMessageTemplate struct {
	// Entity is the base model of NotificationMessageTemplate
	Entity
	// LastModifiedDateTime DateTime the object was last modified.
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`
	// DisplayName Display name for the Notification Message Template.
	DisplayName *string `json:"displayName,omitempty"`
	// DefaultLocale The default locale to fallback onto when the requested locale is not available.
	DefaultLocale *string `json:"defaultLocale,omitempty"`
	// BrandingOptions The Message Template Branding Options. Branding is defined in the Intune Admin Console.
	BrandingOptions *NotificationTemplateBrandingOptions `json:"brandingOptions,omitempty"`
	// RoleScopeTagIDs List of Scope Tags for this Entity instance.
	RoleScopeTagIDs []string `json:"roleScopeTagIds,omitempty"`
	// LocalizedNotificationMessages undocumented
	LocalizedNotificationMessages []LocalizedNotificationMessage `json:"localizedNotificationMessages,omitempty"`
}

// NotificationMessageTemplateSendTestMessageRequestParameter undocumented
type NotificationMessageTemplateSendTestMessageRequestParameter struct {
}

// NotificationMessageTemplateRequestBuilder is request builder for NotificationMessageTemplate
type NotificationMessageTemplateRequestBuilder struct{ BaseRequestBuilder }

// Request returns NotificationMessageTemplateRequest
func (b *NotificationMessageTemplateRequestBuilder) Request() *NotificationMessageTemplateRequest {
	return &NotificationMessageTemplateRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// NotificationMessageTemplateRequest is request for NotificationMessageTemplate
type NotificationMessageTemplateRequest struct{ BaseRequest }

// Get performs GET request for NotificationMessageTemplate
func (r *NotificationMessageTemplateRequest) Get(ctx context.Context) (resObj *NotificationMessageTemplate, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for NotificationMessageTemplate
func (r *NotificationMessageTemplateRequest) Update(ctx context.Context, reqObj *NotificationMessageTemplate) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for NotificationMessageTemplate
func (r *NotificationMessageTemplateRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// LocalizedNotificationMessages returns request builder for LocalizedNotificationMessage collection
func (b *NotificationMessageTemplateRequestBuilder) LocalizedNotificationMessages() *NotificationMessageTemplateLocalizedNotificationMessagesCollectionRequestBuilder {
	bb := &NotificationMessageTemplateLocalizedNotificationMessagesCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/localizedNotificationMessages"
	return bb
}

// NotificationMessageTemplateLocalizedNotificationMessagesCollectionRequestBuilder is request builder for LocalizedNotificationMessage collection
type NotificationMessageTemplateLocalizedNotificationMessagesCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for LocalizedNotificationMessage collection
func (b *NotificationMessageTemplateLocalizedNotificationMessagesCollectionRequestBuilder) Request() *NotificationMessageTemplateLocalizedNotificationMessagesCollectionRequest {
	return &NotificationMessageTemplateLocalizedNotificationMessagesCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for LocalizedNotificationMessage item
func (b *NotificationMessageTemplateLocalizedNotificationMessagesCollectionRequestBuilder) ID(id string) *LocalizedNotificationMessageRequestBuilder {
	bb := &LocalizedNotificationMessageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// NotificationMessageTemplateLocalizedNotificationMessagesCollectionRequest is request for LocalizedNotificationMessage collection
type NotificationMessageTemplateLocalizedNotificationMessagesCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for LocalizedNotificationMessage collection
func (r *NotificationMessageTemplateLocalizedNotificationMessagesCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]LocalizedNotificationMessage, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []LocalizedNotificationMessage
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []LocalizedNotificationMessage
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for LocalizedNotificationMessage collection
func (r *NotificationMessageTemplateLocalizedNotificationMessagesCollectionRequest) Get(ctx context.Context) ([]LocalizedNotificationMessage, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil)
}

// Add performs POST request for LocalizedNotificationMessage collection
func (r *NotificationMessageTemplateLocalizedNotificationMessagesCollectionRequest) Add(ctx context.Context, reqObj *LocalizedNotificationMessage) (resObj *LocalizedNotificationMessage, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}

//
type NotificationMessageTemplateSendTestMessageRequestBuilder struct{ BaseRequestBuilder }

// SendTestMessage action undocumented
func (b *NotificationMessageTemplateRequestBuilder) SendTestMessage(reqObj *NotificationMessageTemplateSendTestMessageRequestParameter) *NotificationMessageTemplateSendTestMessageRequestBuilder {
	bb := &NotificationMessageTemplateSendTestMessageRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/sendTestMessage"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type NotificationMessageTemplateSendTestMessageRequest struct{ BaseRequest }

//
func (b *NotificationMessageTemplateSendTestMessageRequestBuilder) Request() *NotificationMessageTemplateSendTestMessageRequest {
	return &NotificationMessageTemplateSendTestMessageRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *NotificationMessageTemplateSendTestMessageRequest) Post(ctx context.Context) error {
	return r.JSONRequest(ctx, "POST", "", r.requestObject, nil)
}
