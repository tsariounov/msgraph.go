// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import "context"

// BookingService Represents a particular service offered by a booking business.
type BookingService struct {
	// BookingNamedEntity is the base model of BookingService
	BookingNamedEntity
	// DefaultDuration undocumented
	DefaultDuration *Duration `json:"defaultDuration,omitempty"`
	// DefaultLocation undocumented
	DefaultLocation *Location `json:"defaultLocation,omitempty"`
	// DefaultPrice undocumented
	DefaultPrice *float64 `json:"defaultPrice,omitempty"`
	// DefaultPriceType undocumented
	DefaultPriceType *BookingPriceType `json:"defaultPriceType,omitempty"`
	// DefaultReminders The default reminders set in an appointment of this service.
	DefaultReminders []BookingReminder `json:"defaultReminders,omitempty"`
	// Description undocumented
	Description *string `json:"description,omitempty"`
	// IsHiddenFromCustomers undocumented
	IsHiddenFromCustomers *bool `json:"isHiddenFromCustomers,omitempty"`
	// Notes undocumented
	Notes *string `json:"notes,omitempty"`
	// PreBuffer undocumented
	PreBuffer *Duration `json:"preBuffer,omitempty"`
	// PostBuffer undocumented
	PostBuffer *Duration `json:"postBuffer,omitempty"`
	// SchedulingPolicy undocumented
	SchedulingPolicy *BookingSchedulingPolicy `json:"schedulingPolicy,omitempty"`
	// StaffMemberIDs undocumented
	StaffMemberIDs []string `json:"staffMemberIds,omitempty"`
}

// BookingServiceRequestBuilder is request builder for BookingService
type BookingServiceRequestBuilder struct{ BaseRequestBuilder }

// Request returns BookingServiceRequest
func (b *BookingServiceRequestBuilder) Request() *BookingServiceRequest {
	return &BookingServiceRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// BookingServiceRequest is request for BookingService
type BookingServiceRequest struct{ BaseRequest }

// Get performs GET request for BookingService
func (r *BookingServiceRequest) Get(ctx context.Context) (resObj *BookingService, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for BookingService
func (r *BookingServiceRequest) Update(ctx context.Context, reqObj *BookingService) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for BookingService
func (r *BookingServiceRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
