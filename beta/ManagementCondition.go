// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// ManagementCondition Management conditions are events that can be triggered dynamically such as geo-fences, time-fences, and network-fences.
type ManagementCondition struct {
	// Entity is the base model of ManagementCondition
	Entity
	// UniqueName Unique name for the management condition. Used in management condition expressions.
	UniqueName *string `json:"uniqueName,omitempty"`
	// DisplayName The admin defined name of the management condition.
	DisplayName *string `json:"displayName,omitempty"`
	// Description The admin defined description of the management condition.
	Description *string `json:"description,omitempty"`
	// CreatedDateTime The time the management condition was created. Generated service side.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	// ModifiedDateTime The time the management condition was last modified. Updated service side.
	ModifiedDateTime *time.Time `json:"modifiedDateTime,omitempty"`
	// ETag ETag of the management condition. Updated service side.
	ETag *string `json:"eTag,omitempty"`
	// ApplicablePlatforms The applicable platforms for this management condition.
	ApplicablePlatforms []DevicePlatformType `json:"applicablePlatforms,omitempty"`
	// ManagementConditionStatements undocumented
	ManagementConditionStatements []ManagementConditionStatement `json:"managementConditionStatements,omitempty"`
}

// ManagementConditionRequestBuilder is request builder for ManagementCondition
type ManagementConditionRequestBuilder struct{ BaseRequestBuilder }

// Request returns ManagementConditionRequest
func (b *ManagementConditionRequestBuilder) Request() *ManagementConditionRequest {
	return &ManagementConditionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ManagementConditionRequest is request for ManagementCondition
type ManagementConditionRequest struct{ BaseRequest }

// Get performs GET request for ManagementCondition
func (r *ManagementConditionRequest) Get(ctx context.Context) (resObj *ManagementCondition, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ManagementCondition
func (r *ManagementConditionRequest) Update(ctx context.Context, reqObj *ManagementCondition) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ManagementCondition
func (r *ManagementConditionRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ManagementConditionStatements returns request builder for ManagementConditionStatement collection
func (b *ManagementConditionRequestBuilder) ManagementConditionStatements() *ManagementConditionManagementConditionStatementsCollectionRequestBuilder {
	bb := &ManagementConditionManagementConditionStatementsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managementConditionStatements"
	return bb
}

// ManagementConditionManagementConditionStatementsCollectionRequestBuilder is request builder for ManagementConditionStatement collection
type ManagementConditionManagementConditionStatementsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagementConditionStatement collection
func (b *ManagementConditionManagementConditionStatementsCollectionRequestBuilder) Request() *ManagementConditionManagementConditionStatementsCollectionRequest {
	return &ManagementConditionManagementConditionStatementsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagementConditionStatement item
func (b *ManagementConditionManagementConditionStatementsCollectionRequestBuilder) ID(id string) *ManagementConditionStatementRequestBuilder {
	bb := &ManagementConditionStatementRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagementConditionManagementConditionStatementsCollectionRequest is request for ManagementConditionStatement collection
type ManagementConditionManagementConditionStatementsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagementConditionStatement collection
func (r *ManagementConditionManagementConditionStatementsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]ManagementConditionStatement, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagementConditionStatement
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagementConditionStatement
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for ManagementConditionStatement collection
func (r *ManagementConditionManagementConditionStatementsCollectionRequest) Get(ctx context.Context) ([]ManagementConditionStatement, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil)
}

// Add performs POST request for ManagementConditionStatement collection
func (r *ManagementConditionManagementConditionStatementsCollectionRequest) Add(ctx context.Context, reqObj *ManagementConditionStatement) (resObj *ManagementConditionStatement, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
