// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// ManagementConditionStatement A management condition statement is a group of management conditions that enable/disable device/application configurations when all contained management conditions are met.
type ManagementConditionStatement struct {
	// Entity is the base model of ManagementConditionStatement
	Entity
	// DisplayName The admin defined name of the management condition statement.
	DisplayName *string `json:"displayName,omitempty"`
	// Description The admin defined description of the management condition statement.
	Description *string `json:"description,omitempty"`
	// CreatedDateTime The time the management condition statement was created. Generated service side.
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	// ModifiedDateTime The time the management condition statement was last modified. Updated service side.
	ModifiedDateTime *time.Time `json:"modifiedDateTime,omitempty"`
	// Expression The management condition statement expression used to evaluate if a management condition statement was activated/deactivated.
	Expression *ManagementConditionExpression `json:"expression,omitempty"`
	// ETag ETag of the management condition statement. Updated service side.
	ETag *string `json:"eTag,omitempty"`
	// ApplicablePlatforms The applicable platforms for this management condition statement.
	ApplicablePlatforms []DevicePlatformType `json:"applicablePlatforms,omitempty"`
	// ManagementConditions undocumented
	ManagementConditions []ManagementCondition `json:"managementConditions,omitempty"`
}

// ManagementConditionStatementRequestBuilder is request builder for ManagementConditionStatement
type ManagementConditionStatementRequestBuilder struct{ BaseRequestBuilder }

// Request returns ManagementConditionStatementRequest
func (b *ManagementConditionStatementRequestBuilder) Request() *ManagementConditionStatementRequest {
	return &ManagementConditionStatementRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ManagementConditionStatementRequest is request for ManagementConditionStatement
type ManagementConditionStatementRequest struct{ BaseRequest }

// Get performs GET request for ManagementConditionStatement
func (r *ManagementConditionStatementRequest) Get(ctx context.Context) (resObj *ManagementConditionStatement, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for ManagementConditionStatement
func (r *ManagementConditionStatementRequest) Update(ctx context.Context, reqObj *ManagementConditionStatement) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for ManagementConditionStatement
func (r *ManagementConditionStatementRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// ManagementConditions returns request builder for ManagementCondition collection
func (b *ManagementConditionStatementRequestBuilder) ManagementConditions() *ManagementConditionStatementManagementConditionsCollectionRequestBuilder {
	bb := &ManagementConditionStatementManagementConditionsCollectionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/managementConditions"
	return bb
}

// ManagementConditionStatementManagementConditionsCollectionRequestBuilder is request builder for ManagementCondition collection
type ManagementConditionStatementManagementConditionsCollectionRequestBuilder struct{ BaseRequestBuilder }

// Request returns request for ManagementCondition collection
func (b *ManagementConditionStatementManagementConditionsCollectionRequestBuilder) Request() *ManagementConditionStatementManagementConditionsCollectionRequest {
	return &ManagementConditionStatementManagementConditionsCollectionRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// ID returns request builder for ManagementCondition item
func (b *ManagementConditionStatementManagementConditionsCollectionRequestBuilder) ID(id string) *ManagementConditionRequestBuilder {
	bb := &ManagementConditionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/" + id
	return bb
}

// ManagementConditionStatementManagementConditionsCollectionRequest is request for ManagementCondition collection
type ManagementConditionStatementManagementConditionsCollectionRequest struct{ BaseRequest }

// Paging perfoms paging operation for ManagementCondition collection
func (r *ManagementConditionStatementManagementConditionsCollectionRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]ManagementCondition, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ManagementCondition
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ManagementCondition
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

// Get performs GET request for ManagementCondition collection
func (r *ManagementConditionStatementManagementConditionsCollectionRequest) Get(ctx context.Context) ([]ManagementCondition, error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	return r.Paging(ctx, "GET", query, nil)
}

// Add performs POST request for ManagementCondition collection
func (r *ManagementConditionStatementManagementConditionsCollectionRequest) Add(ctx context.Context, reqObj *ManagementCondition) (resObj *ManagementCondition, err error) {
	err = r.JSONRequest(ctx, "POST", "", reqObj, &resObj)
	return
}
