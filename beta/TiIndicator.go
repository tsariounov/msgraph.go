// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// TiIndicator undocumented
type TiIndicator struct {
	// Entity is the base model of TiIndicator
	Entity
	// Action undocumented
	Action *TiAction `json:"action,omitempty"`
	// ActivityGroupNames undocumented
	ActivityGroupNames []string `json:"activityGroupNames,omitempty"`
	// AdditionalInformation undocumented
	AdditionalInformation *string `json:"additionalInformation,omitempty"`
	// AzureTenantID undocumented
	AzureTenantID *string `json:"azureTenantId,omitempty"`
	// Confidence undocumented
	Confidence *int `json:"confidence,omitempty"`
	// Description undocumented
	Description *string `json:"description,omitempty"`
	// DiamondModel undocumented
	DiamondModel *DiamondModel `json:"diamondModel,omitempty"`
	// DomainName undocumented
	DomainName *string `json:"domainName,omitempty"`
	// EmailEncoding undocumented
	EmailEncoding *string `json:"emailEncoding,omitempty"`
	// EmailLanguage undocumented
	EmailLanguage *string `json:"emailLanguage,omitempty"`
	// EmailRecipient undocumented
	EmailRecipient *string `json:"emailRecipient,omitempty"`
	// EmailSenderAddress undocumented
	EmailSenderAddress *string `json:"emailSenderAddress,omitempty"`
	// EmailSenderName undocumented
	EmailSenderName *string `json:"emailSenderName,omitempty"`
	// EmailSourceDomain undocumented
	EmailSourceDomain *string `json:"emailSourceDomain,omitempty"`
	// EmailSourceIPAddress undocumented
	EmailSourceIPAddress *string `json:"emailSourceIpAddress,omitempty"`
	// EmailSubject undocumented
	EmailSubject *string `json:"emailSubject,omitempty"`
	// EmailXMailer undocumented
	EmailXMailer *string `json:"emailXMailer,omitempty"`
	// ExpirationDateTime undocumented
	ExpirationDateTime *time.Time `json:"expirationDateTime,omitempty"`
	// ExternalID undocumented
	ExternalID *string `json:"externalId,omitempty"`
	// FileCompileDateTime undocumented
	FileCompileDateTime *time.Time `json:"fileCompileDateTime,omitempty"`
	// FileCreatedDateTime undocumented
	FileCreatedDateTime *time.Time `json:"fileCreatedDateTime,omitempty"`
	// FileHashType undocumented
	FileHashType *FileHashType `json:"fileHashType,omitempty"`
	// FileHashValue undocumented
	FileHashValue *string `json:"fileHashValue,omitempty"`
	// FileMutexName undocumented
	FileMutexName *string `json:"fileMutexName,omitempty"`
	// FileName undocumented
	FileName *string `json:"fileName,omitempty"`
	// FilePacker undocumented
	FilePacker *string `json:"filePacker,omitempty"`
	// FilePath undocumented
	FilePath *string `json:"filePath,omitempty"`
	// FileSize undocumented
	FileSize *int `json:"fileSize,omitempty"`
	// FileType undocumented
	FileType *string `json:"fileType,omitempty"`
	// IngestedDateTime undocumented
	IngestedDateTime *time.Time `json:"ingestedDateTime,omitempty"`
	// IsActive undocumented
	IsActive *bool `json:"isActive,omitempty"`
	// KillChain undocumented
	KillChain []string `json:"killChain,omitempty"`
	// KnownFalsePositives undocumented
	KnownFalsePositives *string `json:"knownFalsePositives,omitempty"`
	// LastReportedDateTime undocumented
	LastReportedDateTime *time.Time `json:"lastReportedDateTime,omitempty"`
	// MalwareFamilyNames undocumented
	MalwareFamilyNames []string `json:"malwareFamilyNames,omitempty"`
	// NetworkCidrBlock undocumented
	NetworkCidrBlock *string `json:"networkCidrBlock,omitempty"`
	// NetworkDestinationAsn undocumented
	NetworkDestinationAsn *int `json:"networkDestinationAsn,omitempty"`
	// NetworkDestinationCidrBlock undocumented
	NetworkDestinationCidrBlock *string `json:"networkDestinationCidrBlock,omitempty"`
	// NetworkDestinationIPv4 undocumented
	NetworkDestinationIPv4 *string `json:"networkDestinationIPv4,omitempty"`
	// NetworkDestinationIPv6 undocumented
	NetworkDestinationIPv6 *string `json:"networkDestinationIPv6,omitempty"`
	// NetworkDestinationPort undocumented
	NetworkDestinationPort *int `json:"networkDestinationPort,omitempty"`
	// NetworkIPv4 undocumented
	NetworkIPv4 *string `json:"networkIPv4,omitempty"`
	// NetworkIPv6 undocumented
	NetworkIPv6 *string `json:"networkIPv6,omitempty"`
	// NetworkPort undocumented
	NetworkPort *int `json:"networkPort,omitempty"`
	// NetworkProtocol undocumented
	NetworkProtocol *int `json:"networkProtocol,omitempty"`
	// NetworkSourceAsn undocumented
	NetworkSourceAsn *int `json:"networkSourceAsn,omitempty"`
	// NetworkSourceCidrBlock undocumented
	NetworkSourceCidrBlock *string `json:"networkSourceCidrBlock,omitempty"`
	// NetworkSourceIPv4 undocumented
	NetworkSourceIPv4 *string `json:"networkSourceIPv4,omitempty"`
	// NetworkSourceIPv6 undocumented
	NetworkSourceIPv6 *string `json:"networkSourceIPv6,omitempty"`
	// NetworkSourcePort undocumented
	NetworkSourcePort *int `json:"networkSourcePort,omitempty"`
	// PassiveOnly undocumented
	PassiveOnly *bool `json:"passiveOnly,omitempty"`
	// Severity undocumented
	Severity *int `json:"severity,omitempty"`
	// Tags undocumented
	Tags []string `json:"tags,omitempty"`
	// TargetProduct undocumented
	TargetProduct *string `json:"targetProduct,omitempty"`
	// ThreatType undocumented
	ThreatType *string `json:"threatType,omitempty"`
	// TlpLevel undocumented
	TlpLevel *TlpLevel `json:"tlpLevel,omitempty"`
	// URL undocumented
	URL *string `json:"url,omitempty"`
	// UserAgent undocumented
	UserAgent *string `json:"userAgent,omitempty"`
}

// TiIndicatorCollectionSubmitTiIndicatorsRequestParameter undocumented
type TiIndicatorCollectionSubmitTiIndicatorsRequestParameter struct {
	// Value undocumented
	Value []TiIndicator `json:"value,omitempty"`
}

// TiIndicatorCollectionUpdateTiIndicatorsRequestParameter undocumented
type TiIndicatorCollectionUpdateTiIndicatorsRequestParameter struct {
	// Value undocumented
	Value []TiIndicator `json:"value,omitempty"`
}

// TiIndicatorCollectionDeleteTiIndicatorsRequestParameter undocumented
type TiIndicatorCollectionDeleteTiIndicatorsRequestParameter struct {
	// Value undocumented
	Value []string `json:"value,omitempty"`
}

// TiIndicatorCollectionDeleteTiIndicatorsByExternalIDRequestParameter undocumented
type TiIndicatorCollectionDeleteTiIndicatorsByExternalIDRequestParameter struct {
	// Value undocumented
	Value []string `json:"value,omitempty"`
}

// TiIndicatorRequestBuilder is request builder for TiIndicator
type TiIndicatorRequestBuilder struct{ BaseRequestBuilder }

// Request returns TiIndicatorRequest
func (b *TiIndicatorRequestBuilder) Request() *TiIndicatorRequest {
	return &TiIndicatorRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// TiIndicatorRequest is request for TiIndicator
type TiIndicatorRequest struct{ BaseRequest }

// Get performs GET request for TiIndicator
func (r *TiIndicatorRequest) Get(ctx context.Context) (resObj *TiIndicator, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for TiIndicator
func (r *TiIndicatorRequest) Update(ctx context.Context, reqObj *TiIndicator) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for TiIndicator
func (r *TiIndicatorRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

//
type TiIndicatorCollectionSubmitTiIndicatorsRequestBuilder struct{ BaseRequestBuilder }

// SubmitTiIndicators action undocumented
func (b *SecurityTiIndicatorsCollectionRequestBuilder) SubmitTiIndicators(reqObj *TiIndicatorCollectionSubmitTiIndicatorsRequestParameter) *TiIndicatorCollectionSubmitTiIndicatorsRequestBuilder {
	bb := &TiIndicatorCollectionSubmitTiIndicatorsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/submitTiIndicators"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type TiIndicatorCollectionSubmitTiIndicatorsRequest struct{ BaseRequest }

//
func (b *TiIndicatorCollectionSubmitTiIndicatorsRequestBuilder) Request() *TiIndicatorCollectionSubmitTiIndicatorsRequest {
	return &TiIndicatorCollectionSubmitTiIndicatorsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *TiIndicatorCollectionSubmitTiIndicatorsRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]TiIndicator, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TiIndicator
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TiIndicator
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

//
func (r *TiIndicatorCollectionSubmitTiIndicatorsRequest) Post(ctx context.Context) ([]TiIndicator, error) {
	return r.Paging(ctx, "POST", "", r.requestObject)
}

//
type TiIndicatorCollectionUpdateTiIndicatorsRequestBuilder struct{ BaseRequestBuilder }

// UpdateTiIndicators action undocumented
func (b *SecurityTiIndicatorsCollectionRequestBuilder) UpdateTiIndicators(reqObj *TiIndicatorCollectionUpdateTiIndicatorsRequestParameter) *TiIndicatorCollectionUpdateTiIndicatorsRequestBuilder {
	bb := &TiIndicatorCollectionUpdateTiIndicatorsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/updateTiIndicators"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type TiIndicatorCollectionUpdateTiIndicatorsRequest struct{ BaseRequest }

//
func (b *TiIndicatorCollectionUpdateTiIndicatorsRequestBuilder) Request() *TiIndicatorCollectionUpdateTiIndicatorsRequest {
	return &TiIndicatorCollectionUpdateTiIndicatorsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *TiIndicatorCollectionUpdateTiIndicatorsRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]TiIndicator, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []TiIndicator
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []TiIndicator
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

//
func (r *TiIndicatorCollectionUpdateTiIndicatorsRequest) Post(ctx context.Context) ([]TiIndicator, error) {
	return r.Paging(ctx, "POST", "", r.requestObject)
}

//
type TiIndicatorCollectionDeleteTiIndicatorsRequestBuilder struct{ BaseRequestBuilder }

// DeleteTiIndicators action undocumented
func (b *SecurityTiIndicatorsCollectionRequestBuilder) DeleteTiIndicators(reqObj *TiIndicatorCollectionDeleteTiIndicatorsRequestParameter) *TiIndicatorCollectionDeleteTiIndicatorsRequestBuilder {
	bb := &TiIndicatorCollectionDeleteTiIndicatorsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/deleteTiIndicators"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type TiIndicatorCollectionDeleteTiIndicatorsRequest struct{ BaseRequest }

//
func (b *TiIndicatorCollectionDeleteTiIndicatorsRequestBuilder) Request() *TiIndicatorCollectionDeleteTiIndicatorsRequest {
	return &TiIndicatorCollectionDeleteTiIndicatorsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *TiIndicatorCollectionDeleteTiIndicatorsRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]ResultInfo, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ResultInfo
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ResultInfo
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

//
func (r *TiIndicatorCollectionDeleteTiIndicatorsRequest) Post(ctx context.Context) ([]ResultInfo, error) {
	return r.Paging(ctx, "POST", "", r.requestObject)
}

//
type TiIndicatorCollectionDeleteTiIndicatorsByExternalIDRequestBuilder struct{ BaseRequestBuilder }

// DeleteTiIndicatorsByExternalID action undocumented
func (b *SecurityTiIndicatorsCollectionRequestBuilder) DeleteTiIndicatorsByExternalID(reqObj *TiIndicatorCollectionDeleteTiIndicatorsByExternalIDRequestParameter) *TiIndicatorCollectionDeleteTiIndicatorsByExternalIDRequestBuilder {
	bb := &TiIndicatorCollectionDeleteTiIndicatorsByExternalIDRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/deleteTiIndicatorsByExternalId"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type TiIndicatorCollectionDeleteTiIndicatorsByExternalIDRequest struct{ BaseRequest }

//
func (b *TiIndicatorCollectionDeleteTiIndicatorsByExternalIDRequestBuilder) Request() *TiIndicatorCollectionDeleteTiIndicatorsByExternalIDRequest {
	return &TiIndicatorCollectionDeleteTiIndicatorsByExternalIDRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *TiIndicatorCollectionDeleteTiIndicatorsByExternalIDRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]ResultInfo, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []ResultInfo
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []ResultInfo
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

//
func (r *TiIndicatorCollectionDeleteTiIndicatorsByExternalIDRequest) Post(ctx context.Context) ([]ResultInfo, error) {
	return r.Paging(ctx, "POST", "", r.requestObject)
}
