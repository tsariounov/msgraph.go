// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import "context"

// AndroidDeviceOwnerEnterpriseWiFiConfiguration By providing the configurations in this profile you can instruct the Android Device Owner device to connect to desired Wi-Fi endpoint. By specifying the authentication method and security types expected by Wi-Fi endpoint you can make the Wi-Fi connection seamless for end user.
type AndroidDeviceOwnerEnterpriseWiFiConfiguration struct {
	// AndroidDeviceOwnerWiFiConfiguration is the base model of AndroidDeviceOwnerEnterpriseWiFiConfiguration
	AndroidDeviceOwnerWiFiConfiguration
	// EapType Indicates the type of EAP protocol set on the Wi-Fi endpoint (router).
	EapType *AndroidEapType `json:"eapType,omitempty"`
	// AuthenticationMethod Indicates the Authentication Method the client (device) needs to use when the EAP Type is configured to PEAP or EAP-TTLS.
	AuthenticationMethod *WiFiAuthenticationMethod `json:"authenticationMethod,omitempty"`
	// InnerAuthenticationProtocolForEapTtls Non-EAP Method for Authentication (Inner Identity) when EAP Type is EAP-TTLS and Authenticationmethod is Username and Password.
	InnerAuthenticationProtocolForEapTtls *NonEapAuthenticationMethodForEapTtlsType `json:"innerAuthenticationProtocolForEapTtls,omitempty"`
	// InnerAuthenticationProtocolForPeap Non-EAP Method for Authentication (Inner Identity) when EAP Type is PEAP and Authenticationmethod is Username and Password.
	InnerAuthenticationProtocolForPeap *NonEapAuthenticationMethodForPeap `json:"innerAuthenticationProtocolForPeap,omitempty"`
	// OuterIdentityPrivacyTemporaryValue Enable identity privacy (Outer Identity) when EAP Type is configured to EAP-TTLS or PEAP. The String provided here is used to mask the username of individual users when they attempt to connect to Wi-Fi network.
	OuterIdentityPrivacyTemporaryValue *string `json:"outerIdentityPrivacyTemporaryValue,omitempty"`
	// RootCertificateForServerValidation undocumented
	RootCertificateForServerValidation *AndroidDeviceOwnerTrustedRootCertificate `json:"rootCertificateForServerValidation,omitempty"`
	// IdentityCertificateForClientAuthentication undocumented
	IdentityCertificateForClientAuthentication *AndroidDeviceOwnerCertificateProfileBase `json:"identityCertificateForClientAuthentication,omitempty"`
}

// AndroidDeviceOwnerEnterpriseWiFiConfigurationRequestBuilder is request builder for AndroidDeviceOwnerEnterpriseWiFiConfiguration
type AndroidDeviceOwnerEnterpriseWiFiConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns AndroidDeviceOwnerEnterpriseWiFiConfigurationRequest
func (b *AndroidDeviceOwnerEnterpriseWiFiConfigurationRequestBuilder) Request() *AndroidDeviceOwnerEnterpriseWiFiConfigurationRequest {
	return &AndroidDeviceOwnerEnterpriseWiFiConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AndroidDeviceOwnerEnterpriseWiFiConfigurationRequest is request for AndroidDeviceOwnerEnterpriseWiFiConfiguration
type AndroidDeviceOwnerEnterpriseWiFiConfigurationRequest struct{ BaseRequest }

// Get performs GET request for AndroidDeviceOwnerEnterpriseWiFiConfiguration
func (r *AndroidDeviceOwnerEnterpriseWiFiConfigurationRequest) Get(ctx context.Context) (resObj *AndroidDeviceOwnerEnterpriseWiFiConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for AndroidDeviceOwnerEnterpriseWiFiConfiguration
func (r *AndroidDeviceOwnerEnterpriseWiFiConfigurationRequest) Update(ctx context.Context, reqObj *AndroidDeviceOwnerEnterpriseWiFiConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for AndroidDeviceOwnerEnterpriseWiFiConfiguration
func (r *AndroidDeviceOwnerEnterpriseWiFiConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// IdentityCertificateForClientAuthentication is navigation property
func (b *AndroidDeviceOwnerEnterpriseWiFiConfigurationRequestBuilder) IdentityCertificateForClientAuthentication() *AndroidDeviceOwnerCertificateProfileBaseRequestBuilder {
	bb := &AndroidDeviceOwnerCertificateProfileBaseRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/identityCertificateForClientAuthentication"
	return bb
}

// RootCertificateForServerValidation is navigation property
func (b *AndroidDeviceOwnerEnterpriseWiFiConfigurationRequestBuilder) RootCertificateForServerValidation() *AndroidDeviceOwnerTrustedRootCertificateRequestBuilder {
	bb := &AndroidDeviceOwnerTrustedRootCertificateRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/rootCertificateForServerValidation"
	return bb
}
