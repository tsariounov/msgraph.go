// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"time"
)

// PrivilegedRoleAssignment undocumented
type PrivilegedRoleAssignment struct {
	// Entity is the base model of PrivilegedRoleAssignment
	Entity
	// UserID undocumented
	UserID *string `json:"userId,omitempty"`
	// RoleID undocumented
	RoleID *string `json:"roleId,omitempty"`
	// IsElevated undocumented
	IsElevated *bool `json:"isElevated,omitempty"`
	// ExpirationDateTime undocumented
	ExpirationDateTime *time.Time `json:"expirationDateTime,omitempty"`
	// ResultMessage undocumented
	ResultMessage *string `json:"resultMessage,omitempty"`
	// RoleInfo undocumented
	RoleInfo *PrivilegedRole `json:"roleInfo,omitempty"`
}

// PrivilegedRoleAssignmentMakePermanentRequestParameter undocumented
type PrivilegedRoleAssignmentMakePermanentRequestParameter struct {
	// Reason undocumented
	Reason *string `json:"reason,omitempty"`
	// TicketNumber undocumented
	TicketNumber *string `json:"ticketNumber,omitempty"`
	// TicketSystem undocumented
	TicketSystem *string `json:"ticketSystem,omitempty"`
}

// PrivilegedRoleAssignmentMakeEligibleRequestParameter undocumented
type PrivilegedRoleAssignmentMakeEligibleRequestParameter struct {
}

// PrivilegedRoleAssignmentRequestBuilder is request builder for PrivilegedRoleAssignment
type PrivilegedRoleAssignmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns PrivilegedRoleAssignmentRequest
func (b *PrivilegedRoleAssignmentRequestBuilder) Request() *PrivilegedRoleAssignmentRequest {
	return &PrivilegedRoleAssignmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// PrivilegedRoleAssignmentRequest is request for PrivilegedRoleAssignment
type PrivilegedRoleAssignmentRequest struct{ BaseRequest }

// Get performs GET request for PrivilegedRoleAssignment
func (r *PrivilegedRoleAssignmentRequest) Get(ctx context.Context) (resObj *PrivilegedRoleAssignment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for PrivilegedRoleAssignment
func (r *PrivilegedRoleAssignmentRequest) Update(ctx context.Context, reqObj *PrivilegedRoleAssignment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for PrivilegedRoleAssignment
func (r *PrivilegedRoleAssignmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// RoleInfo is navigation property
func (b *PrivilegedRoleAssignmentRequestBuilder) RoleInfo() *PrivilegedRoleRequestBuilder {
	bb := &PrivilegedRoleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleInfo"
	return bb
}

//
type PrivilegedRoleAssignmentMakePermanentRequestBuilder struct{ BaseRequestBuilder }

// MakePermanent action undocumented
func (b *PrivilegedRoleAssignmentRequestBuilder) MakePermanent(reqObj *PrivilegedRoleAssignmentMakePermanentRequestParameter) *PrivilegedRoleAssignmentMakePermanentRequestBuilder {
	bb := &PrivilegedRoleAssignmentMakePermanentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/makePermanent"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type PrivilegedRoleAssignmentMakePermanentRequest struct{ BaseRequest }

//
func (b *PrivilegedRoleAssignmentMakePermanentRequestBuilder) Request() *PrivilegedRoleAssignmentMakePermanentRequest {
	return &PrivilegedRoleAssignmentMakePermanentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *PrivilegedRoleAssignmentMakePermanentRequest) Post(ctx context.Context) (resObj *PrivilegedRoleAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}

//
type PrivilegedRoleAssignmentMakeEligibleRequestBuilder struct{ BaseRequestBuilder }

// MakeEligible action undocumented
func (b *PrivilegedRoleAssignmentRequestBuilder) MakeEligible(reqObj *PrivilegedRoleAssignmentMakeEligibleRequestParameter) *PrivilegedRoleAssignmentMakeEligibleRequestBuilder {
	bb := &PrivilegedRoleAssignmentMakeEligibleRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/makeEligible"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type PrivilegedRoleAssignmentMakeEligibleRequest struct{ BaseRequest }

//
func (b *PrivilegedRoleAssignmentMakeEligibleRequestBuilder) Request() *PrivilegedRoleAssignmentMakeEligibleRequest {
	return &PrivilegedRoleAssignmentMakeEligibleRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *PrivilegedRoleAssignmentMakeEligibleRequest) Post(ctx context.Context) (resObj *PrivilegedRoleAssignment, err error) {
	err = r.JSONRequest(ctx, "POST", "", r.requestObject, &resObj)
	return
}
