// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"time"
)

// DeviceManagementAutopilotEvent Represents an Autopilot flow event.
type DeviceManagementAutopilotEvent struct {
	// Entity is the base model of DeviceManagementAutopilotEvent
	Entity
	// EventDateTime Time when the event occurred .
	EventDateTime *time.Time `json:"eventDateTime,omitempty"`
	// DeviceRegisteredDateTime Device registration date.
	DeviceRegisteredDateTime *time.Time `json:"deviceRegisteredDateTime,omitempty"`
	// EnrollmentStartDateTime Device enrollment start date.
	EnrollmentStartDateTime *time.Time `json:"enrollmentStartDateTime,omitempty"`
	// EnrollmentType Enrollment type.
	EnrollmentType *WindowsAutopilotEnrollmentType `json:"enrollmentType,omitempty"`
	// DeviceSerialNumber Device serial number.
	DeviceSerialNumber *string `json:"deviceSerialNumber,omitempty"`
	// ManagedDeviceName Managed device name.
	ManagedDeviceName *string `json:"managedDeviceName,omitempty"`
	// UserPrincipalName User principal name used to enroll the device.
	UserPrincipalName *string `json:"userPrincipalName,omitempty"`
	// WindowsAutopilotDeploymentProfileDisplayName Autopilot profile name.
	WindowsAutopilotDeploymentProfileDisplayName *string `json:"windowsAutopilotDeploymentProfileDisplayName,omitempty"`
	// EnrollmentState Enrollment state like Enrolled, Failed.
	EnrollmentState *EnrollmentState `json:"enrollmentState,omitempty"`
	// Windows10EnrollmentCompletionPageConfigurationDisplayName Enrollment Status Page profile name
	Windows10EnrollmentCompletionPageConfigurationDisplayName *string `json:"windows10EnrollmentCompletionPageConfigurationDisplayName,omitempty"`
	// DeploymentState Deployment state like Success, Failure, InProgress, SuccessWithTimeout.
	DeploymentState *WindowsAutopilotDeploymentState `json:"deploymentState,omitempty"`
	// OsVersion Device operating system version.
	OsVersion *string `json:"osVersion,omitempty"`
	// DeploymentDuration Autopilot deployment duration including enrollment.
	DeploymentDuration *Duration `json:"deploymentDuration,omitempty"`
	// DeploymentTotalDuration Total deployment duration from enrollment to Desktop screen.
	DeploymentTotalDuration *Duration `json:"deploymentTotalDuration,omitempty"`
	// DevicePreparationDuration Time spent in device enrollment.
	DevicePreparationDuration *Duration `json:"devicePreparationDuration,omitempty"`
	// DeviceSetupDuration Time spent in device ESP.
	DeviceSetupDuration *Duration `json:"deviceSetupDuration,omitempty"`
	// AccountSetupDuration Time spent in user ESP.
	AccountSetupDuration *Duration `json:"accountSetupDuration,omitempty"`
	// DeploymentStartDateTime Deployment start time.
	DeploymentStartDateTime *time.Time `json:"deploymentStartDateTime,omitempty"`
	// DeploymentEndDateTime Deployment end time.
	DeploymentEndDateTime *time.Time `json:"deploymentEndDateTime,omitempty"`
	// TargetedAppCount Count of applications targeted.
	TargetedAppCount *int `json:"targetedAppCount,omitempty"`
	// TargetedPolicyCount Count of policies targeted.
	TargetedPolicyCount *int `json:"targetedPolicyCount,omitempty"`
	// EnrollmentFailureDetails Enrollment failure details.
	EnrollmentFailureDetails *string `json:"enrollmentFailureDetails,omitempty"`
}

// DeviceManagementAutopilotEventRequestBuilder is request builder for DeviceManagementAutopilotEvent
type DeviceManagementAutopilotEventRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceManagementAutopilotEventRequest
func (b *DeviceManagementAutopilotEventRequestBuilder) Request() *DeviceManagementAutopilotEventRequest {
	return &DeviceManagementAutopilotEventRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceManagementAutopilotEventRequest is request for DeviceManagementAutopilotEvent
type DeviceManagementAutopilotEventRequest struct{ BaseRequest }

// Get performs GET request for DeviceManagementAutopilotEvent
func (r *DeviceManagementAutopilotEventRequest) Get(ctx context.Context) (resObj *DeviceManagementAutopilotEvent, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceManagementAutopilotEvent
func (r *DeviceManagementAutopilotEventRequest) Update(ctx context.Context, reqObj *DeviceManagementAutopilotEvent) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceManagementAutopilotEvent
func (r *DeviceManagementAutopilotEventRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
