// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"time"

	"github.com/yaegashi/msgraph.go/jsonx"
)

// Alert undocumented
type Alert struct {
	// Entity is the base model of Alert
	Entity
	// ActivityGroupName undocumented
	ActivityGroupName *string `json:"activityGroupName,omitempty"`
	// AssignedTo undocumented
	AssignedTo *string `json:"assignedTo,omitempty"`
	// AzureSubscriptionID undocumented
	AzureSubscriptionID *string `json:"azureSubscriptionId,omitempty"`
	// AzureTenantID undocumented
	AzureTenantID *string `json:"azureTenantId,omitempty"`
	// Category undocumented
	Category *string `json:"category,omitempty"`
	// ClosedDateTime undocumented
	ClosedDateTime *time.Time `json:"closedDateTime,omitempty"`
	// CloudAppStates undocumented
	CloudAppStates []CloudAppSecurityState `json:"cloudAppStates,omitempty"`
	// Comments undocumented
	Comments []string `json:"comments,omitempty"`
	// Confidence undocumented
	Confidence *int `json:"confidence,omitempty"`
	// CreatedDateTime undocumented
	CreatedDateTime *time.Time `json:"createdDateTime,omitempty"`
	// Description undocumented
	Description *string `json:"description,omitempty"`
	// DetectionIDs undocumented
	DetectionIDs []string `json:"detectionIds,omitempty"`
	// EventDateTime undocumented
	EventDateTime *time.Time `json:"eventDateTime,omitempty"`
	// Feedback undocumented
	Feedback *AlertFeedback `json:"feedback,omitempty"`
	// FileStates undocumented
	FileStates []FileSecurityState `json:"fileStates,omitempty"`
	// HistoryStates undocumented
	HistoryStates []AlertHistoryState `json:"historyStates,omitempty"`
	// HostStates undocumented
	HostStates []HostSecurityState `json:"hostStates,omitempty"`
	// LastModifiedDateTime undocumented
	LastModifiedDateTime *time.Time `json:"lastModifiedDateTime,omitempty"`
	// MalwareStates undocumented
	MalwareStates []MalwareState `json:"malwareStates,omitempty"`
	// NetworkConnections undocumented
	NetworkConnections []NetworkConnection `json:"networkConnections,omitempty"`
	// Processes undocumented
	Processes []Process `json:"processes,omitempty"`
	// RecommendedActions undocumented
	RecommendedActions []string `json:"recommendedActions,omitempty"`
	// RegistryKeyStates undocumented
	RegistryKeyStates []RegistryKeyState `json:"registryKeyStates,omitempty"`
	// Severity undocumented
	Severity *AlertSeverity `json:"severity,omitempty"`
	// SourceMaterials undocumented
	SourceMaterials []string `json:"sourceMaterials,omitempty"`
	// Status undocumented
	Status *AlertStatus `json:"status,omitempty"`
	// Tags undocumented
	Tags []string `json:"tags,omitempty"`
	// Title undocumented
	Title *string `json:"title,omitempty"`
	// Triggers undocumented
	Triggers []AlertTrigger `json:"triggers,omitempty"`
	// UserStates undocumented
	UserStates []UserSecurityState `json:"userStates,omitempty"`
	// VendorInformation undocumented
	VendorInformation *SecurityVendorInformation `json:"vendorInformation,omitempty"`
	// VulnerabilityStates undocumented
	VulnerabilityStates []VulnerabilityState `json:"vulnerabilityStates,omitempty"`
}

// AlertCollectionUpdateAlertsRequestParameter undocumented
type AlertCollectionUpdateAlertsRequestParameter struct {
	// Value undocumented
	Value []Alert `json:"value,omitempty"`
}

// AlertRequestBuilder is request builder for Alert
type AlertRequestBuilder struct{ BaseRequestBuilder }

// Request returns AlertRequest
func (b *AlertRequestBuilder) Request() *AlertRequest {
	return &AlertRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// AlertRequest is request for Alert
type AlertRequest struct{ BaseRequest }

// Get performs GET request for Alert
func (r *AlertRequest) Get(ctx context.Context) (resObj *Alert, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for Alert
func (r *AlertRequest) Update(ctx context.Context, reqObj *Alert) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for Alert
func (r *AlertRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

//
type AlertCollectionUpdateAlertsRequestBuilder struct{ BaseRequestBuilder }

// UpdateAlerts action undocumented
func (b *SecurityAlertsCollectionRequestBuilder) UpdateAlerts(reqObj *AlertCollectionUpdateAlertsRequestParameter) *AlertCollectionUpdateAlertsRequestBuilder {
	bb := &AlertCollectionUpdateAlertsRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.BaseRequestBuilder.baseURL += "/updateAlerts"
	bb.BaseRequestBuilder.requestObject = reqObj
	return bb
}

//
type AlertCollectionUpdateAlertsRequest struct{ BaseRequest }

//
func (b *AlertCollectionUpdateAlertsRequestBuilder) Request() *AlertCollectionUpdateAlertsRequest {
	return &AlertCollectionUpdateAlertsRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client, requestObject: b.requestObject},
	}
}

//
func (r *AlertCollectionUpdateAlertsRequest) Paging(ctx context.Context, method, path string, obj interface{}) ([]Alert, error) {
	req, err := r.NewJSONRequest(method, path, obj)
	if err != nil {
		return nil, err
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}
	res, err := r.client.Do(req)
	if err != nil {
		return nil, err
	}
	var values []Alert
	for {
		defer res.Body.Close()
		if res.StatusCode != http.StatusOK {
			b, _ := ioutil.ReadAll(res.Body)
			errRes := &ErrorResponse{Response: res}
			err := jsonx.Unmarshal(b, errRes)
			if err != nil {
				return nil, fmt.Errorf("%s: %s", res.Status, string(b))
			}
			return nil, errRes
		}
		var (
			paging Paging
			value  []Alert
		)
		err := jsonx.NewDecoder(res.Body).Decode(&paging)
		if err != nil {
			return nil, err
		}
		err = jsonx.Unmarshal(paging.Value, &value)
		if err != nil {
			return nil, err
		}
		values = append(values, value...)
		if len(paging.NextLink) == 0 {
			return values, nil
		}
		req, err = http.NewRequest("GET", paging.NextLink, nil)
		if ctx != nil {
			req = req.WithContext(ctx)
		}
		res, err = r.client.Do(req)
		if err != nil {
			return nil, err
		}
	}
}

//
func (r *AlertCollectionUpdateAlertsRequest) Post(ctx context.Context) ([]Alert, error) {
	return r.Paging(ctx, "POST", "", r.requestObject)
}
