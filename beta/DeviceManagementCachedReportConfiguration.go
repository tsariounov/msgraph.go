// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"time"
)

// DeviceManagementCachedReportConfiguration Entity representing the configuration of a cached report
type DeviceManagementCachedReportConfiguration struct {
	// Entity is the base model of DeviceManagementCachedReportConfiguration
	Entity
	// ReportName Name of the report
	ReportName *string `json:"reportName,omitempty"`
	// Filter Filters applied on report creation.
	Filter *string `json:"filter,omitempty"`
	// Select Columns selected from the report
	Select []string `json:"select,omitempty"`
	// OrderBy Ordering of columns in the report
	OrderBy []string `json:"orderBy,omitempty"`
	// Status Status of the cached report
	Status *DeviceManagementReportStatus `json:"status,omitempty"`
	// LastRefreshDateTime Time that the cached report was last refreshed
	LastRefreshDateTime *time.Time `json:"lastRefreshDateTime,omitempty"`
	// ExpirationDateTime Time that the cached report expires
	ExpirationDateTime *time.Time `json:"expirationDateTime,omitempty"`
}

// DeviceManagementCachedReportConfigurationRequestBuilder is request builder for DeviceManagementCachedReportConfiguration
type DeviceManagementCachedReportConfigurationRequestBuilder struct{ BaseRequestBuilder }

// Request returns DeviceManagementCachedReportConfigurationRequest
func (b *DeviceManagementCachedReportConfigurationRequestBuilder) Request() *DeviceManagementCachedReportConfigurationRequest {
	return &DeviceManagementCachedReportConfigurationRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// DeviceManagementCachedReportConfigurationRequest is request for DeviceManagementCachedReportConfiguration
type DeviceManagementCachedReportConfigurationRequest struct{ BaseRequest }

// Get performs GET request for DeviceManagementCachedReportConfiguration
func (r *DeviceManagementCachedReportConfigurationRequest) Get(ctx context.Context) (resObj *DeviceManagementCachedReportConfiguration, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for DeviceManagementCachedReportConfiguration
func (r *DeviceManagementCachedReportConfigurationRequest) Update(ctx context.Context, reqObj *DeviceManagementCachedReportConfiguration) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for DeviceManagementCachedReportConfiguration
func (r *DeviceManagementCachedReportConfigurationRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}
