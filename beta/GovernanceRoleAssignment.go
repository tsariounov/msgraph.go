// Code generated by msgraph-generate.go DO NOT EDIT.

package msgraph

import (
	"context"
	"time"
)

// GovernanceRoleAssignment undocumented
type GovernanceRoleAssignment struct {
	// Entity is the base model of GovernanceRoleAssignment
	Entity
	// ResourceID undocumented
	ResourceID *string `json:"resourceId,omitempty"`
	// RoleDefinitionID undocumented
	RoleDefinitionID *string `json:"roleDefinitionId,omitempty"`
	// SubjectID undocumented
	SubjectID *string `json:"subjectId,omitempty"`
	// LinkedEligibleRoleAssignmentID undocumented
	LinkedEligibleRoleAssignmentID *string `json:"linkedEligibleRoleAssignmentId,omitempty"`
	// ExternalID undocumented
	ExternalID *string `json:"externalId,omitempty"`
	// StartDateTime undocumented
	StartDateTime *time.Time `json:"startDateTime,omitempty"`
	// EndDateTime undocumented
	EndDateTime *time.Time `json:"endDateTime,omitempty"`
	// MemberType undocumented
	MemberType *string `json:"memberType,omitempty"`
	// AssignmentState undocumented
	AssignmentState *string `json:"assignmentState,omitempty"`
	// Status undocumented
	Status *string `json:"status,omitempty"`
	// Resource undocumented
	Resource *GovernanceResource `json:"resource,omitempty"`
	// RoleDefinition undocumented
	RoleDefinition *GovernanceRoleDefinition `json:"roleDefinition,omitempty"`
	// Subject undocumented
	Subject *GovernanceSubject `json:"subject,omitempty"`
	// LinkedEligibleRoleAssignment undocumented
	LinkedEligibleRoleAssignment *GovernanceRoleAssignment `json:"linkedEligibleRoleAssignment,omitempty"`
}

// GovernanceRoleAssignmentRequestBuilder is request builder for GovernanceRoleAssignment
type GovernanceRoleAssignmentRequestBuilder struct{ BaseRequestBuilder }

// Request returns GovernanceRoleAssignmentRequest
func (b *GovernanceRoleAssignmentRequestBuilder) Request() *GovernanceRoleAssignmentRequest {
	return &GovernanceRoleAssignmentRequest{
		BaseRequest: BaseRequest{baseURL: b.baseURL, client: b.client},
	}
}

// GovernanceRoleAssignmentRequest is request for GovernanceRoleAssignment
type GovernanceRoleAssignmentRequest struct{ BaseRequest }

// Get performs GET request for GovernanceRoleAssignment
func (r *GovernanceRoleAssignmentRequest) Get(ctx context.Context) (resObj *GovernanceRoleAssignment, err error) {
	var query string
	if r.query != nil {
		query = "?" + r.query.Encode()
	}
	err = r.JSONRequest(ctx, "GET", query, nil, &resObj)
	return
}

// Update performs PATCH request for GovernanceRoleAssignment
func (r *GovernanceRoleAssignmentRequest) Update(ctx context.Context, reqObj *GovernanceRoleAssignment) error {
	return r.JSONRequest(ctx, "PATCH", "", reqObj, nil)
}

// Delete performs DELETE request for GovernanceRoleAssignment
func (r *GovernanceRoleAssignmentRequest) Delete(ctx context.Context) error {
	return r.JSONRequest(ctx, "DELETE", "", nil, nil)
}

// LinkedEligibleRoleAssignment is navigation property
func (b *GovernanceRoleAssignmentRequestBuilder) LinkedEligibleRoleAssignment() *GovernanceRoleAssignmentRequestBuilder {
	bb := &GovernanceRoleAssignmentRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/linkedEligibleRoleAssignment"
	return bb
}

// Resource is navigation property
func (b *GovernanceRoleAssignmentRequestBuilder) Resource() *GovernanceResourceRequestBuilder {
	bb := &GovernanceResourceRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/resource"
	return bb
}

// RoleDefinition is navigation property
func (b *GovernanceRoleAssignmentRequestBuilder) RoleDefinition() *GovernanceRoleDefinitionRequestBuilder {
	bb := &GovernanceRoleDefinitionRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/roleDefinition"
	return bb
}

// Subject is navigation property
func (b *GovernanceRoleAssignmentRequestBuilder) Subject() *GovernanceSubjectRequestBuilder {
	bb := &GovernanceSubjectRequestBuilder{BaseRequestBuilder: b.BaseRequestBuilder}
	bb.baseURL += "/subject"
	return bb
}
